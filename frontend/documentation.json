{
    "pipes": [],
    "interfaces": [
        {
            "name": "API",
            "id": "interface-API-73a04041e5f632a1d83a01c381095717cff0d6676ad61ac9d1f937ba6faf9c7b74b8d4a70c5777e9889a570ba57378c499a13643c6e6d5c4a4b14d79d9c5542f",
            "file": "src/app/+state/auth/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions'\nimport {clearPlayer} from './auth.actions';\nexport const AUTH_FEATURE_KEY = 'auth';\n\nexport interface API {\n  startTime: number | null;\n  loadingTime: number | null;\n  isLoading: boolean;\n  isLoaded: boolean;\n  error?: any;\n}\n\nexport interface IAuthApi extends API {\n  response: any;\n}\n\nexport interface IPlayer {\n  id?: string;\n  login: string;\n  password: string;\n  wallet?: string;\n  isLogin: boolean;\n}\n\nexport interface AuthState {\n  player: IPlayer;\n  authApi: IAuthApi;\n  sidebarValue: boolean;\n}\n\nexport interface SettingsPartialState {\n  readonly [AUTH_FEATURE_KEY]: AuthState;\n}\n\nexport const initialState: AuthState = {\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n);\n",
            "properties": [
                {
                    "name": "error",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isLoaded",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                },
                {
                    "name": "isLoading",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "loadingTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 7
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "AuthState",
            "id": "interface-AuthState-73a04041e5f632a1d83a01c381095717cff0d6676ad61ac9d1f937ba6faf9c7b74b8d4a70c5777e9889a570ba57378c499a13643c6e6d5c4a4b14d79d9c5542f",
            "file": "src/app/+state/auth/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions'\nimport {clearPlayer} from './auth.actions';\nexport const AUTH_FEATURE_KEY = 'auth';\n\nexport interface API {\n  startTime: number | null;\n  loadingTime: number | null;\n  isLoading: boolean;\n  isLoaded: boolean;\n  error?: any;\n}\n\nexport interface IAuthApi extends API {\n  response: any;\n}\n\nexport interface IPlayer {\n  id?: string;\n  login: string;\n  password: string;\n  wallet?: string;\n  isLogin: boolean;\n}\n\nexport interface AuthState {\n  player: IPlayer;\n  authApi: IAuthApi;\n  sidebarValue: boolean;\n}\n\nexport interface SettingsPartialState {\n  readonly [AUTH_FEATURE_KEY]: AuthState;\n}\n\nexport const initialState: AuthState = {\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n);\n",
            "properties": [
                {
                    "name": "authApi",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IAuthApi",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "player",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlayer",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27
                },
                {
                    "name": "sidebarValue",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "GameDataState",
            "id": "interface-GameDataState-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "activeGameList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IActiveGameList[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 47
                },
                {
                    "name": "gameData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGameData",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 43
                },
                {
                    "name": "gameDataAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 44
                },
                {
                    "name": "gameList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IGameList[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 46
                },
                {
                    "name": "playerList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlayer[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 41
                },
                {
                    "name": "selectedPlayerList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 42
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IActiveGameList",
            "id": "interface-IActiveGameList-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "bet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 34
                },
                {
                    "name": "needPlayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 35
                },
                {
                    "name": "registeredPlayers",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 36
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IAuthApi",
            "id": "interface-IAuthApi-73a04041e5f632a1d83a01c381095717cff0d6676ad61ac9d1f937ba6faf9c7b74b8d4a70c5777e9889a570ba57378c499a13643c6e6d5c4a4b14d79d9c5542f",
            "file": "src/app/+state/auth/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions'\nimport {clearPlayer} from './auth.actions';\nexport const AUTH_FEATURE_KEY = 'auth';\n\nexport interface API {\n  startTime: number | null;\n  loadingTime: number | null;\n  isLoading: boolean;\n  isLoaded: boolean;\n  error?: any;\n}\n\nexport interface IAuthApi extends API {\n  response: any;\n}\n\nexport interface IPlayer {\n  id?: string;\n  login: string;\n  password: string;\n  wallet?: string;\n  isLogin: boolean;\n}\n\nexport interface AuthState {\n  player: IPlayer;\n  authApi: IAuthApi;\n  sidebarValue: boolean;\n}\n\nexport interface SettingsPartialState {\n  readonly [AUTH_FEATURE_KEY]: AuthState;\n}\n\nexport const initialState: AuthState = {\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n);\n",
            "properties": [
                {
                    "name": "response",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "any",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [
                "API"
            ]
        },
        {
            "name": "IGameData",
            "id": "interface-IGameData-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "bank",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "conditionToStartDone",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "finishTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "gameId",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "gameTookPlace",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "isFinish",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "launchTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                },
                {
                    "name": "playerList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "IPlayer[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25
                },
                {
                    "name": "startTime",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IGameList",
            "id": "interface-IGameList-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "iconList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string[]",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "linkGame",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "title",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPlayer",
            "id": "interface-IPlayer-73a04041e5f632a1d83a01c381095717cff0d6676ad61ac9d1f937ba6faf9c7b74b8d4a70c5777e9889a570ba57378c499a13643c6e6d5c4a4b14d79d9c5542f",
            "file": "src/app/+state/auth/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions'\nimport {clearPlayer} from './auth.actions';\nexport const AUTH_FEATURE_KEY = 'auth';\n\nexport interface API {\n  startTime: number | null;\n  loadingTime: number | null;\n  isLoading: boolean;\n  isLoaded: boolean;\n  error?: any;\n}\n\nexport interface IAuthApi extends API {\n  response: any;\n}\n\nexport interface IPlayer {\n  id?: string;\n  login: string;\n  password: string;\n  wallet?: string;\n  isLogin: boolean;\n}\n\nexport interface AuthState {\n  player: IPlayer;\n  authApi: IAuthApi;\n  sidebarValue: boolean;\n}\n\nexport interface SettingsPartialState {\n  readonly [AUTH_FEATURE_KEY]: AuthState;\n}\n\nexport const initialState: AuthState = {\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n);\n",
            "properties": [
                {
                    "name": "id",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "isLogin",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 23
                },
                {
                    "name": "login",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "password",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "wallet",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 22
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "IPlayer",
            "id": "interface-IPlayer-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf-1",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "address",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9
                },
                {
                    "name": "amountPaid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "balance",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 11
                },
                {
                    "name": "isPaid",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 12
                },
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 8
                },
                {
                    "name": "percentage",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "number | null",
                    "indexKey": "",
                    "optional": true,
                    "description": "",
                    "line": 14
                },
                {
                    "name": "privateKey",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "IPlayer-1"
        },
        {
            "name": "SettingsPartialState",
            "id": "interface-SettingsPartialState-73a04041e5f632a1d83a01c381095717cff0d6676ad61ac9d1f937ba6faf9c7b74b8d4a70c5777e9889a570ba57378c499a13643c6e6d5c4a4b14d79d9c5542f",
            "file": "src/app/+state/auth/auth.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as AuthActions from './auth.actions'\nimport {clearPlayer} from './auth.actions';\nexport const AUTH_FEATURE_KEY = 'auth';\n\nexport interface API {\n  startTime: number | null;\n  loadingTime: number | null;\n  isLoading: boolean;\n  isLoaded: boolean;\n  error?: any;\n}\n\nexport interface IAuthApi extends API {\n  response: any;\n}\n\nexport interface IPlayer {\n  id?: string;\n  login: string;\n  password: string;\n  wallet?: string;\n  isLogin: boolean;\n}\n\nexport interface AuthState {\n  player: IPlayer;\n  authApi: IAuthApi;\n  sidebarValue: boolean;\n}\n\nexport interface SettingsPartialState {\n  readonly [AUTH_FEATURE_KEY]: AuthState;\n}\n\nexport const initialState: AuthState = {\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n};\n\nexport const authReducer = createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n);\n",
            "properties": [
                {
                    "name": "AUTH_FEATURE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 33,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        },
        {
            "name": "SettingsPartialState",
            "id": "interface-SettingsPartialState-5b1b4258444eea988895e45db3602080d27000824d551739cc7a3de27948059673758d8d140783152a65d8b085c66461221c5dc9ed627df4916195cdb2fcfdcf-1",
            "file": "src/app/+state/game-data/game-data.reducer.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "import { createReducer, on } from '@ngrx/store';\nimport * as GameDataActions from './game-data.actions';\nimport {walletListStabs} from './stabs';\n\nexport const GAME_DATA_FEATURE_KEY = 'game-data';\n\nexport interface IPlayer {\n  name: string; // имя\n  address: string; // номер кошелька\n  privateKey: string; // приватный ключ для платежа\n  balance?: number | null; // текущий баланс\n  isPaid?: boolean; // Была ли оплата от этого кошелька в смарт контракте?\n  amountPaid?: number | null; // Какая фактическая сумма пришла к оплате?\n  percentage?: number | null; // процент выплат данному игроку от общего банка?\n}\nexport interface IGameData {\n  gameId: string; // id игры\n  launchTime: string; // время создания игры\n  startTime: string; // время старта игры\n  finishTime: string; // время завершения игры\n  conditionToStartDone: boolean; //условия для старта выполнены?\n  isFinish: boolean; // игра окончена?\n  gameTookPlace: boolean | null; //игра состоялась?\n  bank: number;\n  playerList: IPlayer[]; // список игроков и их условия\n}\n\nexport interface IGameList {\n  iconList: string[];\n  title: string;\n  linkGame: string;\n}\nexport interface IActiveGameList {\n  id: string;\n  needPlayers: number;\n  registeredPlayers: number;\n  bet: number;\n}\n\nexport interface GameDataState {\n  playerList: IPlayer[];\n  selectedPlayerList: string[];\n  gameData: IGameData;\n  gameDataAddress: string;\n\n  gameList: IGameList[];\n  activeGameList: IActiveGameList[];\n}\n\nexport interface SettingsPartialState {\n  readonly [GAME_DATA_FEATURE_KEY]: GameDataState;\n}\n\nexport const initialState: GameDataState = {\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n};\n\nexport const gameDataReducer = createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n);\n",
            "properties": [
                {
                    "name": "GAME_DATA_FEATURE_KEY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameDataState",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 51,
                    "modifierKind": [
                        148
                    ]
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "SettingsPartialState-1"
        },
        {
            "name": "User",
            "id": "interface-User-d4821beac0e4a852e513391b7470981c4353fdd95a18628bb68136c8695b489ee15b926e2e5031bc26cf30e1508e0a362c3ee13a06734702b4d15af140e485d5",
            "file": "src/stories/user.ts",
            "deprecated": false,
            "deprecationMessage": "",
            "type": "interface",
            "sourceCode": "export interface User {\n  name: string;\n}\n",
            "properties": [
                {
                    "name": "name",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 2
                }
            ],
            "indexSignatures": [],
            "kind": 171,
            "methods": [],
            "extends": []
        }
    ],
    "injectables": [
        {
            "name": "AuthEffects",
            "id": "injectable-AuthEffects-038652a18cf3879268e74e918b186e32ab9196513a1de037404ec9b7dbed4c031ee47dd88a6f81c740ed451d7d4ec3e873c5af5f21ce61ddfd9926e9f846e573",
            "file": "src/app/+state/auth/auth.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "addAccount$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(addAccount),\n        tap((action) => {\n          this.registrationService.addNewUser(action.data).subscribe({\n            next: (response) => {\n              console.log('Пользователь создан:', response);\n              this.dialog.closeAll();\n            },\n            error: (err) => {\n              console.error('Ошибка создания пользователя:', err);\n            }\n          });\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "auth$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(login),\n        tap((action) => {\n          this.registrationService.checkAuth(action.data).subscribe(\n            res => {\n              localStorage.setItem('jwtToken', res.token.token);\n              localStorage.setItem('playerData', JSON.stringify({\n                id: res.token.id,\n                login: res.token.login,\n                password: res.token.password,\n                wallet: res.token.wallet,\n                isLogin: true\n              }));\n              this.store.dispatch(loginSuccess({ response: res.token }))\n              this.dialog.closeAll();\n              this.router.navigate(['']);\n            },\n            err => {\n              this.store.dispatch(loginError({error: err}))\n            }\n          );\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 37
                },
                {
                    "name": "checkAuth$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(checkAuth),\n        tap(() => {\n          const raw = localStorage.getItem('playerData');\n          console.log('raw', raw)\n          if (raw) {\n            try {\n              const parsed = JSON.parse(raw);\n              this.store.dispatch(loginSuccess({ response: parsed }));\n            } catch (e) {\n              console.error('Ошибка чтения playerData из localStorage:', e);\n            }\n          }\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 64
                },
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 14,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "logout",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(logout),\n        tap(() => {\n          try {\n            localStorage.removeItem('jwtToken');\n            localStorage.removeItem('playerData');\n            this.store.dispatch(clearPlayer())\n            this.dialog.closeAll();\n            this.router.navigate([''], {});\n          } catch (error) {\n            console.error('Ошибка при выходе из системы:', error);\n          }\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 83
                },
                {
                    "name": "registrationService",
                    "defaultValue": "inject(RegistrationService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 15,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 16,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {addAccount, checkAuth, clearPlayer, login, loginError, loginSuccess, logout} from './auth.actions';\nimport {tap} from 'rxjs/operators';\nimport {RegistrationService} from '../../services/registration.service';\nimport {MatDialog} from '@angular/material/dialog';\nimport {Router} from '@angular/router';\nimport {Store} from '@ngrx/store';\n\n@Injectable()\nexport class AuthEffects {\n  private actions$ = inject(Actions);\n  private registrationService = inject(RegistrationService);\n  private dialog = inject(MatDialog);\n  private router = inject(Router);\n  private store = inject(Store);\n\n\n  addAccount$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(addAccount),\n        tap((action) => {\n          this.registrationService.addNewUser(action.data).subscribe({\n            next: (response) => {\n              console.log('Пользователь создан:', response);\n              this.dialog.closeAll();\n            },\n            error: (err) => {\n              console.error('Ошибка создания пользователя:', err);\n            }\n          });\n        })\n      ),\n    { dispatch: false }\n  );\n\n  auth$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(login),\n        tap((action) => {\n          this.registrationService.checkAuth(action.data).subscribe(\n            res => {\n              localStorage.setItem('jwtToken', res.token.token);\n              localStorage.setItem('playerData', JSON.stringify({\n                id: res.token.id,\n                login: res.token.login,\n                password: res.token.password,\n                wallet: res.token.wallet,\n                isLogin: true\n              }));\n              this.store.dispatch(loginSuccess({ response: res.token }))\n              this.dialog.closeAll();\n              this.router.navigate(['']);\n            },\n            err => {\n              this.store.dispatch(loginError({error: err}))\n            }\n          );\n        })\n      ),\n    { dispatch: false }\n  );\n\n  checkAuth$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(checkAuth),\n        tap(() => {\n          const raw = localStorage.getItem('playerData');\n          console.log('raw', raw)\n          if (raw) {\n            try {\n              const parsed = JSON.parse(raw);\n              this.store.dispatch(loginSuccess({ response: parsed }));\n            } catch (e) {\n              console.error('Ошибка чтения playerData из localStorage:', e);\n            }\n          }\n        })\n      ),\n    { dispatch: false }\n  );\n\n  logout = createEffect(() =>\n      this.actions$.pipe(\n        ofType(logout),\n        tap(() => {\n          try {\n            localStorage.removeItem('jwtToken');\n            localStorage.removeItem('playerData');\n            this.store.dispatch(clearPlayer())\n            this.dialog.closeAll();\n            this.router.navigate([''], {});\n          } catch (error) {\n            console.error('Ошибка при выходе из системы:', error);\n          }\n        })\n      ),\n    { dispatch: false }\n  );\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GameDataEffects",
            "id": "injectable-GameDataEffects-b2a2629df17c24a1d10cc00692a07c2b55505ee3c4cc8ba2c0410601c37da2b0b7312bd54efa8c62ee690bc77065e03c3f96fda063680b563b9b4553d0080dcb",
            "file": "src/app/+state/game-data/game-data.effects.ts",
            "properties": [
                {
                    "name": "actions$",
                    "defaultValue": "inject(Actions)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "gameDataService",
                    "defaultValue": "inject(GameDataService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getGameData$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(getGameData),\n        tap((action) => {\n          this.gameDataService.getGameData(action.data).subscribe({\n            next: (data) =>console.log(data),\n            error: (error) => this.store.dispatch(loadGameDataFailure({ error })),\n          });\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 39
                },
                {
                    "name": "loadGameData$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(loadGameData),\n        tap((action) => {\n          console.log('WAIT', action)\n          this.gameDataService.setGameData(action.data).subscribe({\n            next: (data) => {\n              this.store.dispatch(loadGameDataSuccess({ data: data.contractAddress }));\n              console.log(data)\n            },\n            error: (error) => this.store.dispatch(loadGameDataFailure({ error })),\n          });\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "setSelectedPlayerList$",
                    "defaultValue": "createEffect(() =>\n      this.actions$.pipe(\n        ofType(setSelectedPlayerList),\n        withLatestFrom(\n          this.store.select(selectSelectedPlayerList),\n          this.store.select(selectPlayerList),\n        ),\n        tap(async ([{}, selectedPlayerList, playerList]) => {\n          const selectedPlayersData = playerList\n            .filter(player => selectedPlayerList.includes(player.address));\n\n          const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');\n\n          const playersWithBalance = await Promise.all(\n            selectedPlayersData.map(async player => {\n              const balanceBigInt = await provider.getBalance(player.address);\n              const balance = Number(ethers.formatEther(balanceBigInt));\n              return { ...player, balance };\n            })\n          );\n\n          this.store.dispatch(setSelectedPlayerListData({playerList: playersWithBalance}))\n        })\n      ),\n    { dispatch: false }\n  )",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 52
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable, inject } from '@angular/core';\nimport {Actions, createEffect, ofType} from '@ngrx/effects';\nimport {tap, withLatestFrom} from 'rxjs';\nimport {\n  getGameData,\n  loadGameData,\n  loadGameDataFailure,\n  loadGameDataSuccess,\n  setSelectedPlayerList, setSelectedPlayerListData\n} from './game-data.actions';\nimport {GameDataService} from '../../services/game-data.service';\nimport {Store} from '@ngrx/store';\nimport {selectPlayerList, selectSelectedPlayerList} from './game-data.selectors';\nimport {ethers} from 'ethers';\n\n@Injectable()\nexport class GameDataEffects {\n  private actions$ = inject(Actions);\n  private gameDataService = inject(GameDataService);\n  private store = inject(Store);\n\n  loadGameData$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(loadGameData),\n        tap((action) => {\n          console.log('WAIT', action)\n          this.gameDataService.setGameData(action.data).subscribe({\n            next: (data) => {\n              this.store.dispatch(loadGameDataSuccess({ data: data.contractAddress }));\n              console.log(data)\n            },\n            error: (error) => this.store.dispatch(loadGameDataFailure({ error })),\n          });\n        })\n      ),\n    { dispatch: false }\n  );\n\n  getGameData$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(getGameData),\n        tap((action) => {\n          this.gameDataService.getGameData(action.data).subscribe({\n            next: (data) =>console.log(data),\n            error: (error) => this.store.dispatch(loadGameDataFailure({ error })),\n          });\n        })\n      ),\n    { dispatch: false }\n  );\n\n  setSelectedPlayerList$ = createEffect(() =>\n      this.actions$.pipe(\n        ofType(setSelectedPlayerList),\n        withLatestFrom(\n          this.store.select(selectSelectedPlayerList),\n          this.store.select(selectPlayerList),\n        ),\n        tap(async ([{}, selectedPlayerList, playerList]) => {\n          const selectedPlayersData = playerList\n            .filter(player => selectedPlayerList.includes(player.address));\n\n          const provider = new ethers.JsonRpcProvider('http://127.0.0.1:8545');\n\n          const playersWithBalance = await Promise.all(\n            selectedPlayersData.map(async player => {\n              const balanceBigInt = await provider.getBalance(player.address);\n              const balance = Number(ethers.formatEther(balanceBigInt));\n              return { ...player, balance };\n            })\n          );\n\n          this.store.dispatch(setSelectedPlayerListData({playerList: playersWithBalance}))\n        })\n      ),\n    { dispatch: false }\n  );\n}\n",
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "GameDataService",
            "id": "injectable-GameDataService-a8184bde45b9d1b5bfbc3179b6a730e115c2c276f12c8b9e503c44a544ebffaaa21f5ccb053a0523ea75f37f8606906e40ffcaded88afd800a4a13f161815a36",
            "file": "src/app/services/game-data.service.ts",
            "properties": [],
            "methods": [
                {
                    "name": "getGameData",
                    "args": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 12,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "setGameData",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 9,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class GameDataService {\n  constructor(private http: HttpClient) {}\n\n  setGameData(data: any): Observable<any> {\n    return this.http.post('http://localhost:3000/game/startArray', data );\n  }\n  getGameData(data: string): Observable<any> {\n    return this.http.get('http://localhost:3000/game/getArray', { params: { data } });\n  }\n\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "RegistrationService",
            "id": "injectable-RegistrationService-f3959ca47f86e95e6e335978d470ec61bb27e86a1c72d69e3c77c16f5c334a06172e78aff938e23c3401765003bcf8f422a7b290a120bd3faf56663efecb5018",
            "file": "src/app/services/registration.service.ts",
            "properties": [
                {
                    "name": "apiUrl",
                    "defaultValue": "'http://localhost:3000/api/auth'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 9,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "addNewUser",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "checkAuth",
                    "args": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "Observable<any>",
                    "typeParameters": [],
                    "line": 14,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "data",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\n\n@Injectable({ providedIn: 'root' })\nexport class RegistrationService {\n  constructor(private http: HttpClient) {}\n\n  private apiUrl = 'http://localhost:3000/api/auth';\n\n  addNewUser(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/register`, data );\n  }\n  checkAuth(data: any): Observable<any> {\n    return this.http.post(`${this.apiUrl}/login`, data );\n  }\n}\n",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 6,
                "jsdoctags": [
                    {
                        "name": "http",
                        "type": "HttpClient",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "type": "injectable"
        },
        {
            "name": "SidebarService",
            "id": "injectable-SidebarService-c7c17e151edb49fa9057d64a9fe5b670a4fee922838795d95540f3fabc06edbe059a4781dd4a4969fa1dfa416a8c2df8eaac11634312536640c825fb19456398",
            "file": "src/app/services/sidebar.service.ts",
            "properties": [
                {
                    "name": "isExpanded$",
                    "defaultValue": "this.isExpandedSubject.asObservable()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "isExpandedSubject",
                    "defaultValue": "new BehaviorSubject<boolean>(false)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 10,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 11,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methods": [
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 15,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "description": "",
            "rawdescription": "\n",
            "sourceCode": "import {inject, Injectable} from '@angular/core';\nimport { BehaviorSubject } from 'rxjs';\nimport {Store} from '@ngrx/store';\nimport {setSidebar} from '../+state/auth/auth.actions';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SidebarService {\n  private isExpandedSubject = new BehaviorSubject<boolean>(false);\n  private store = inject(Store);\n\n  isExpanded$ = this.isExpandedSubject.asObservable();\n\n  toggleSidebar() {\n    this.isExpandedSubject.next(!this.isExpandedSubject.value);\n    this.store.dispatch(setSidebar({sidebarValue: this.isExpandedSubject.value}))\n    console.log('this.isExpandedSubject', this.isExpandedSubject.value)\n  }\n}\n",
            "extends": [],
            "type": "injectable"
        }
    ],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "ActiveGameListComponent",
            "id": "component-ActiveGameListComponent-d824caf423d648961a38a11c498d147e6d38a2d32dddb1a3a316aa04a3152b9b425bab5ba560b335bd0a0b3d75afc6d66be5a4233e242ddf182cea9905475433",
            "file": "src/app/components/active-game-list/active-game-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-active-game-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./active-game-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "link",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21
                },
                {
                    "name": "route",
                    "defaultValue": "inject(ActivatedRoute)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "rows",
                    "defaultValue": "Array.from({ length: 15 })",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "selectActiveGames$",
                    "defaultValue": "this.store.select(selectActiveGames)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 38
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButton"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport { MatButton } from '@angular/material/button';\nimport { ActivatedRoute } from '@angular/router';\nimport {Store} from '@ngrx/store';\nimport {getActiveGames} from '../../+state/game-data/game-data.actions';\nimport {getGameList, selectActiveGames} from '../../+state/game-data/game-data.selectors';\nimport {AsyncPipe} from '@angular/common';\n\n@Component({\n  selector: 'app-active-game-list',\n  standalone: true,\n  imports: [\n    MatButton,\n    AsyncPipe,\n  ],\n  templateUrl: './active-game-list.component.html',\n  styleUrl: './active-game-list.component.scss'\n})\nexport class ActiveGameListComponent implements OnInit {\n  title: string = '';\n  link: string = '';\n  rows = Array.from({ length: 15 });\n\n  private store = inject(Store);\n  private route = inject(ActivatedRoute);\n\n  constructor() {\n    this.route.queryParams.subscribe(params => {\n      this.title = params['title'];\n      this.link = params['link'];\n    });\n  }\n\n  ngOnInit() {\n    this.store.dispatch(getActiveGames({game: this.link}))\n  }\n\n  selectActiveGames$ = this.store.select(selectActiveGames);\n\n}\n",
            "styleUrl": "./active-game-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [],
                "line": 25
            },
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"container\">\n  <div class=\"header\">{{ title }}</div>\n\n  <div class=\"table-container\">\n    <table class=\"table\">\n      <thead>\n      <tr class=\"table-header\">\n        <th class=\"header-cell\">#</th>\n        <th class=\"header-cell\">ID</th>\n        <th class=\"header-cell\">Кол-во игроков</th>\n        <th class=\"header-cell\">Нужные ставки</th>\n        <th class=\"header-cell\"></th>\n      </tr>\n      </thead>\n      <tbody>\n        @for (game of (selectActiveGames$ | async); track game.id; let i = $index) {\n          <tr class=\"table-row\">\n            <td class=\"table-cell\">{{ i + 1 }}</td>\n            <td class=\"table-cell\">{{ game.id }}</td>\n            <td class=\"table-cell\">{{ game.registeredPlayers }}/{{ game.needPlayers }}</td>\n            <td class=\"table-cell\">{{ game.bet }}</td>\n            <td class=\"table-cell action-cell\">\n              <button mat-raised-button class=\"join-button\">Войти</button>\n            </td>\n          </tr>\n        }\n      </tbody>\n    </table>\n  </div>\n\n  <div class=\"footer\">\n    <button mat-raised-button>Create</button>\n  </div>\n</div>\n"
        },
        {
            "name": "AppComponent",
            "id": "component-AppComponent-e8f3426880ce459a7d50dd2f351b116af94533ad3f2f3c2ced6c928215a829154712bc3fca081d50158a8e6b53283146dd26c9d7142b8156ae6175fe39ce6f01",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'front'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 12
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MainContainerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {MainContainerComponent} from './containers/main-container/main-container.component';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [MainContainerComponent],\n  templateUrl: './app.component.html',\n  styleUrl: './app.component.scss'\n})\nexport class AppComponent {\n  title = 'front';\n}\n",
            "styleUrl": "./app.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-main-container></app-main-container>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-d7bf0323e6da130e2609e2af0117b4a8d7cd874132206af50bf43dfc37044485fe50f2867ea76525730dd195b9b95a43802a12dadc6ad5cd7bf2faa07f19f0da",
            "file": "src/stories/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-button",
            "styleUrls": [
                "./button.css"
            ],
            "styles": [],
            "template": " <button  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "backgroundColor",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nWhat background color to use",
                    "description": "<p>What background color to use</p>\n",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "'Button'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "pos": 760,
                            "end": 773,
                            "kind": 327,
                            "id": 0,
                            "flags": 16842752,
                            "modifierFlagsCache": 0,
                            "transformFlags": 0,
                            "tagName": {
                                "pos": 761,
                                "end": 769,
                                "kind": 80,
                                "id": 0,
                                "flags": 16842752,
                                "transformFlags": 0,
                                "escapedText": "required"
                            },
                            "comment": ""
                        }
                    ],
                    "rawdescription": "\n\nButton contents\n\n",
                    "description": "<p>Button contents</p>\n",
                    "line": 37,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "primary",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nIs this the principal call to action on the page?",
                    "description": "<p>Is this the principal call to action on the page?</p>\n",
                    "line": 21,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "size",
                    "defaultValue": "'medium'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nHow large should the button be?",
                    "description": "<p>How large should the button be?</p>\n",
                    "line": 29,
                    "type": "\"small\" | \"medium\" | \"large\"",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "rawdescription": "\nOptional click handler",
                    "description": "<p>Optional click handler</p>\n",
                    "line": 41,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { CommonModule } from '@angular/common';\nimport { Component, Input, Output, EventEmitter } from '@angular/core';\n\n@Component({\n  selector: 'storybook-button',\n  standalone: true,\n  imports: [CommonModule],\n  template: ` <button\n  type=\"button\"\n  (click)=\"onClick.emit($event)\"\n  [ngClass]=\"classes\"\n  [ngStyle]=\"{ 'background-color': backgroundColor }\"\n>\n  {{ label }}\n</button>`,\n  styleUrls: ['./button.css'],\n})\nexport class ButtonComponent {\n  /** Is this the principal call to action on the page? */\n  @Input()\n  primary = false;\n\n  /** What background color to use */\n  @Input()\n  backgroundColor?: string;\n\n  /** How large should the button be? */\n  @Input()\n  size: 'small' | 'medium' | 'large' = 'medium';\n\n  /**\n   * Button contents\n   *\n   * @required\n   */\n  @Input()\n  label = 'Button';\n\n  /** Optional click handler */\n  @Output()\n  onClick = new EventEmitter<Event>();\n\n  public get classes(): string[] {\n    const mode = this.primary ? 'storybook-button--primary' : 'storybook-button--secondary';\n\n    return ['storybook-button', `storybook-button--${this.size}`, mode];\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-button {\n  display: inline-block;\n  cursor: pointer;\n  border: 0;\n  border-radius: 3em;\n  font-weight: 700;\n  line-height: 1;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n.storybook-button--primary {\n  background-color: #555ab9;\n  color: white;\n}\n.storybook-button--secondary {\n  box-shadow: rgba(0, 0, 0, 0.15) 0px 0px 0px 1px inset;\n  background-color: transparent;\n  color: #333;\n}\n.storybook-button--small {\n  padding: 10px 16px;\n  font-size: 12px;\n}\n.storybook-button--medium {\n  padding: 11px 20px;\n  font-size: 14px;\n}\n.storybook-button--large {\n  padding: 12px 24px;\n  font-size: 16px;\n}\n",
                    "styleUrl": "./button.css"
                }
            ],
            "stylesData": "",
            "extends": [],
            "accessors": {
                "classes": {
                    "name": "classes",
                    "getSignature": {
                        "name": "classes",
                        "type": "[]",
                        "returnType": "string[]",
                        "line": 43
                    }
                }
            }
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-42d5b05c79be4e16b94aa8b504a0980a72746994ce46403868b229e8b59d4f801ac87cc07e2a3984c8d379c7ba3c2c04fcb77b7806b115177401a079fb7cfed9-1",
            "file": "src/app/components/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "action",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatIconModule} from '@angular/material/icon';\n\n@Component({\n  selector: 'app-button',\n  standalone: true,\n  imports: [\n    MatButtonModule,\n    MatDividerModule,\n    MatIconModule\n  ],\n  templateUrl: './button.component.html',\n  styleUrl: './button.component.scss'\n})\nexport class ButtonComponent {\n  @Input() buttonLabel: string = '';\n\n  @Output() emitter = new EventEmitter();\n\n  action($event: any) {\n    const message = {\n      event: 'ButtonComponent:CLICK',\n      data: $event\n    }\n    this.emitter.emit(message)\n  }\n}\n\n",
            "styleUrl": "./button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "ButtonComponent-1",
            "templateData": "<div class=\"example-button-container\">\n  <a mat-fab extended (click)=\"action(buttonLabel)\">\n    {{buttonLabel}}\n  </a>\n</div>\n"
        },
        {
            "name": "CardGameComponent",
            "id": "component-CardGameComponent-b4cd466f187cb7e0c31773787668438fd2211fcc2ac7d5c35da946ec15842ecfa12915818221e049a838c1e92b5d2b1187a4ec34631ddc9e5d3c5277973a1e28",
            "file": "src/app/components/card-game/card-game.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-game",
            "styleUrls": [
                "./card-game.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./card-game.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "iconList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string[]",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatIconModule } from '@angular/material/icon';\n\n@Component({\n  selector: 'app-card-game',\n  standalone: true,\n  imports: [CommonModule, MatIconModule],\n  templateUrl: './card-game.component.html',\n  styleUrls: ['./card-game.component.scss']\n})\nexport class CardGameComponent {\n  @Input() title: string = '';\n  @Input() iconList: string[] = [];\n\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".game-card {\n  align-items: center;\n  appearance: button;\n  background-attachment: scroll;\n  background-clip: border-box;\n  background-color: rgb(50, 55, 56);\n  background-image: linear-gradient(to left, rgb(44, 80, 64), rgba(0, 0, 0, 0) 75%);\n  background-origin: padding-box;\n  background-position: 0% 0%;\n  background-repeat: repeat;\n  background-size: auto;\n  border: 0px solid rgb(255, 255, 255);\n  border-radius: 12px;\n  box-sizing: border-box;\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n  display: flex;\n  flex: 1 1 0%;\n  font-family: avertastd;\n  font-size: 14px;\n  font-weight: 800;\n  grid-column: 1 / span 2;\n  height: 252px;\n  justify-content: center;\n  line-height: 21px;\n  margin: 0;\n  overflow: hidden;\n  padding: 20px 12px;\n  position: relative;\n  text-align: center;\n  width: 351px;\n  user-select: none;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-border-image: none;\n\n  .game-content {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    gap: 20px;\n    width: 100%;\n  }\n\n  h2 {\n    margin: 0;\n    font-size: 18px;\n    color: rgb(255, 255, 255);\n  }\n\n  .score-board {\n    width: 100%;\n    \n    .score {\n      display: flex;\n      justify-content: space-around;\n      font-size: 14px;\n      \n      span {\n        padding: 5px 10px;\n        background-color: rgba(255, 255, 255, 0.1);\n        border-radius: 4px;\n      }\n    }\n  }\n\n  .game-options {\n    display: flex;\n    gap: 20px;\n  }\n\n  .game-option {\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    border-radius: 50%;\n    width: 60px;\n    height: 60px;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: pointer;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background: rgba(255, 255, 255, 0.2);\n      transform: scale(1.1);\n    }\n\n    mat-icon {\n      color: white;\n      font-size: 30px;\n      width: 30px;\n      height: 30px;\n    }\n  }\n\n  .game-result {\n    font-size: 14px;\n    margin-top: 10px;\n\n    p {\n      margin: 5px 0;\n    }\n\n    .result-text {\n      font-weight: bold;\n      color: rgb(36, 238, 137);\n    }\n  }\n\n  .reset-button {\n    background: rgba(255, 255, 255, 0.1);\n    border: none;\n    border-radius: 4px;\n    color: rgb(255, 255, 255);\n    padding: 8px 16px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background: rgba(255, 255, 255, 0.2);\n    }\n  }\n}\n\n.game-container {\n  max-width: 600px;\n  margin: 0 auto;\n  padding: 20px;\n  text-align: center;\n  background-color: #f5f5f5;\n  border-radius: 10px;\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);\n\n  h2 {\n    color: #333;\n    margin-bottom: 20px;\n  }\n}\n\n.choices {\n  display: flex;\n  justify-content: center;\n  gap: 20px;\n  margin-bottom: 20px;\n\n  .choice-button {\n    padding: 15px 30px;\n    font-size: 1.1em;\n    border: none;\n    border-radius: 5px;\n    background-color: #4CAF50;\n    color: white;\n    cursor: pointer;\n    transition: all 0.3s ease;\n\n    &:hover {\n      background-color: #45a049;\n      transform: scale(1.05);\n    }\n\n    &.selected {\n      background-color: #2196F3;\n      transform: scale(1.1);\n    }\n  }\n}\n\n.result {\n  margin: 20px 0;\n  padding: 15px;\n  background-color: #fff;\n  border-radius: 5px;\n  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);\n\n  p {\n    margin: 5px 0;\n  }\n\n  .result-text {\n    font-size: 1.2em;\n    font-weight: bold;\n    color: #2196F3;\n  }\n} ",
                    "styleUrl": "./card-game.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"game-card\">\n  <div class=\"game-content\">\n    <h2>{{ title }}</h2>\n    <div class=\"game-options\">\n      @for (icon of iconList; track icon) {\n        <button class=\"game-option\">\n          <mat-icon>{{ icon }}</mat-icon>\n        </button>\n      }\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "CardGamesContainerComponent",
            "id": "component-CardGamesContainerComponent-ad633d22e94b9eb22aedda72fbba7a313ebbd8d3f949fa68e573d04d9f32e43aef47449eed36cf353fab2abe0881ee8890d1a12817ca16523ab04713ec6af910",
            "file": "src/app/containers/card-games-container/card-games-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-card-games-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./card-games-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "getGameList$",
                    "defaultValue": "this.store.select(getGameList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "router",
                    "defaultValue": "inject(Router)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "navigateTo",
                    "args": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "link",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        },
                        {
                            "name": "title",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardGameComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {CardGameComponent} from '../../components/card-game/card-game.component';\nimport {Store} from '@ngrx/store';\nimport {getGameList} from '../../+state/game-data/game-data.selectors';\nimport {AsyncPipe} from '@angular/common';\nimport {Router} from '@angular/router';\n\n@Component({\n  selector: 'app-card-games-container',\n  imports: [\n    CardGameComponent,\n    AsyncPipe\n  ],\n  standalone: true,\n  templateUrl: './card-games-container.component.html',\n  styleUrl: './card-games-container.component.scss'\n})\nexport class CardGamesContainerComponent {\n  private store = inject(Store);\n  private router = inject(Router);\n\n  getGameList$ = this.store.select(getGameList);\n\n  navigateTo(link: string, title: string) {\n    this.router.navigate(['/game-list'], {\n      queryParams: { link: link, title: title }\n    });\n  }\n}\n",
            "styleUrl": "./card-games-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "@for (game of (getGameList$ | async); track game) {\n  <app-card-game\n    [title]=\"game.title\"\n    [iconList]=\"game.iconList\"\n    (click)=\"navigateTo(game.linkGame, game.title)\"\n  ></app-card-game>\n}\n\n"
        },
        {
            "name": "CreateGameFormComponent",
            "id": "component-CreateGameFormComponent-10d9a6f8c5e9d074141a8de202c1aad02816b140a9e546c3a511dc7a131fb34fe2c093618f83b62864e7dafc61d619a137dc399224d51ec0de0ac50c1af426a0",
            "file": "src/app/components/create-game-form/create-game-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-create-game-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./create-game-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatChipsModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressBarModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatChipsModule} from '@angular/material/chips';\nimport {MatProgressBarModule} from '@angular/material/progress-bar';\n\n@Component({\n  selector: 'app-create-game-form',\n  imports: [MatCardModule, MatChipsModule, MatProgressBarModule],\n  standalone: true,\n  templateUrl: './create-game-form.component.html',\n  styleUrl: './create-game-form.component.scss'\n})\nexport class CreateGameFormComponent {\n\n}\n",
            "styleUrl": "./create-game-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card class=\"example-card\" appearance=\"outlined\">\n  <mat-card-header>\n    <mat-card-title>Chihuahua</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    <p>{{longText}}</p>\n  </mat-card-content>\n  <mat-card-footer class=\"example-card-footer\">\n    <mat-chip-set aria-label=\"Chihuahua traits\">\n      <mat-chip>charming</mat-chip>\n      <mat-chip>graceful</mat-chip>\n      <mat-chip>sassy</mat-chip>\n    </mat-chip-set>\n  </mat-card-footer>\n</mat-card>\n"
        },
        {
            "name": "GamePageComponent",
            "id": "component-GamePageComponent-4e29423f85dfbb1793e7c3525b530ec0aa1f77a5e73cc0b5cc6b3df276c5b14f920431c2f233fa8572382ed3a2b59b3f094c40585d0fc0fe4a80fffb6035798e",
            "file": "src/app/components/game-page/game-page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-page",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-page.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "gameData",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 30,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "gameDataAddress",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "infoList",
                    "defaultValue": "[\n    {\n      title: 'launchTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'startTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'finishTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'gasForContractStart',\n      data: 0.005\n    },\n    {\n      title: 'gasForContractFinish',\n      data: 0.005\n    },\n    {\n      title: 'gasForTransactions',\n      data: 5\n    },\n    {\n      title: 'Player 1 received:',\n      data: 33.033\n    },\n    {\n      title: 'Player 2 received:',\n      data: 44.001\n    },\n    {\n      title: 'Player 3 received:',\n      data: 0.101\n    }\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 31,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "playerList",
                    "defaultValue": "[]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "IPlayer[]",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 71,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 73,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "PlayerProfileComponent",
                    "type": "component"
                },
                {
                    "name": "MultiselectComponent",
                    "type": "component"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatProgressSpinnerModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {PlayerProfileComponent} from '../player-profile/player-profile.component';\nimport {MultiselectComponent} from '../multiselect/multiselect.component';\nimport {ButtonComponent} from '../button/button.component';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule} from '@angular/forms';\nimport {MatCardModule} from '@angular/material/card';\nimport {IPlayer} from '../../+state/game-data/game-data.reducer';\nimport {MatProgressSpinnerModule} from '@angular/material/progress-spinner';\n\n@Component({\n  selector: 'app-game-page',\n  standalone: true,\n  imports: [\n    PlayerProfileComponent,\n    MultiselectComponent,\n    ButtonComponent,\n    FormsModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatCardModule,\n    MatProgressSpinnerModule,\n  ],\n  templateUrl: './game-page.component.html',\n  styleUrl: './game-page.component.scss'\n})\nexport class GamePageComponent {\n  @Input() playerList: IPlayer[] = [];\n  @Input() gameData: any;\n  @Input() infoList: any = [\n    {\n      title: 'launchTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'startTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'finishTime',\n      data: '11.11.2025, 13:35:00'\n    },\n    {\n      title: 'gasForContractStart',\n      data: 0.005\n    },\n    {\n      title: 'gasForContractFinish',\n      data: 0.005\n    },\n    {\n      title: 'gasForTransactions',\n      data: 5\n    },\n    {\n      title: 'Player 1 received:',\n      data: 33.033\n    },\n    {\n      title: 'Player 2 received:',\n      data: 44.001\n    },\n    {\n      title: 'Player 3 received:',\n      data: 0.101\n    }\n  ];\n  @Input() gameDataAddress: any;\n\n  @Output() emitter = new EventEmitter();\n\n  events(event: any) {\n    if (event.data === 'Start') {\n      const message = {\n        event: event.event,\n        data:event.data,\n        gameData: this.gameData\n      }\n      this.emitter.emit(message)\n    } else if (event.data === 'Finish') {\n      const message = {\n        event: event.event,\n        data: event.data,\n        gameData: this.gameDataAddress,\n      }\n      this.emitter.emit(message)\n    }\n  }\n\n}\n",
            "styleUrl": "./game-page.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<!--<mat-spinner></mat-spinner>-->\n\n<div class=\"game-page\">\n  <div class=\"players-select\">\n    <app-multiselect\n      [toppingList]=\"playerList\"\n      [selectedToppings]=\"gameData.playerList\"\n      (emitter)=\"emitter.emit($event)\"\n    ></app-multiselect>\n  </div>\n\n  <div class=\"players\">\n    @for (player of gameData.playerList; track player) {\n      <div>\n        <app-player-profile\n          [title]=\"player.name\"\n          [address]=\"player.address\"\n          [balance]=\"player.balance ?? null\"\n          (emitter)=\"events($event)\"\n        ></app-player-profile>\n      </div>\n    }\n  </div>\n\n  <div class=\"start-button\">\n    <app-button\n      [buttonLabel]=\"'Start'\"\n      (emitter)=\"events($event)\"\n    >\n    </app-button>\n  </div>\n\n  <div class=\"players-pay\">\n    @for (player of gameData.playerList; track player) {\n      <app-button\n        [buttonLabel]=\"player.name + ': Pay 3 ETH'\"\n      >\n      </app-button>\n    }\n  </div>\n\n  <div class=\"bank\">\n    <mat-card appearance=\"outlined\">\n      <mat-card-content>\n        <span>\n          <b>Main bank:</b> {{gameData.bank}} {{gameData.currency}}\n        </span>\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n  <div class=\"players\">\n    @for (player of gameData.playerList; track player) {\n      <div class=\"percentage\">\n        <mat-label>{{ player.name }} in game</mat-label>\n        <form class=\"example-form\">\n          <mat-form-field class=\"input-field\">\n            <mat-label>Set percentage</mat-label>\n            <input\n              matInput\n              placeholder=\"Set percentage for winners\"\n              [(ngModel)]=\"player.percentage\"\n              [ngModelOptions]=\"{standalone: true}\"\n            >\n          </mat-form-field>\n        </form>\n      </div>\n    }\n  </div>\n\n  <div class=\"start-button\">\n    <app-button\n      [buttonLabel]=\"'Finish'\"\n      (emitter)=\"events($event)\"\n    >\n    </app-button>\n  </div>\n\n  <div class=\"info-form\">\n    <mat-card appearance=\"outlined\">\n      <mat-card-header>\n        <mat-card-title>Game info</mat-card-title>\n      </mat-card-header>\n      <mat-card-content class=\"content-info\">\n        @for (item of infoList; track item) {\n          <span class=\"info-row\">\n            <b>-{{ item.title }}</b>\n            <span class=\"example-spacer\"></span>\n            <span class=\"info-data\">{{ item.data }}</span>\n          </span>\n        }\n      </mat-card-content>\n    </mat-card>\n  </div>\n\n</div>\n"
        },
        {
            "name": "GamePageContainerComponent",
            "id": "component-GamePageContainerComponent-fe1fe70086e68dd7d5bf151eee16846ef189bd50d6a378fa1d558bf117f1c65a556b8555d141697dd885bb2c8cdd21499682f1d9f00d0c5466265d8611c3371a",
            "file": "src/app/containers/game-page-container/game-page-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-game-page-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./game-page-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "playerList$",
                    "defaultValue": "this.store.select(selectPlayerList)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29
                },
                {
                    "name": "selectGameData$",
                    "defaultValue": "this.store.select(selectGameData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "selectGameDataAddress$",
                    "defaultValue": "this.store.select(selectGameDataAddress)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 27,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "GamePageComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject, OnInit} from '@angular/core';\nimport {\n  selectGameData,\n  selectGameDataAddress,\n  selectPlayerList\n} from '../../+state/game-data/game-data.selectors';\nimport {Store} from '@ngrx/store';\nimport {GamePageComponent} from '../../components/game-page/game-page.component';\nimport {AsyncPipe} from '@angular/common';\nimport {\n  getGameData,\n  loadGameData, setLaunchTime,\n  setSelectedPlayerList\n} from '../../+state/game-data/game-data.actions';\n\n@Component({\n  selector: 'app-game-page-container',\n  standalone: true,\n  imports: [\n    GamePageComponent,\n    AsyncPipe\n  ],\n  templateUrl: './game-page-container.component.html',\n  styleUrl: './game-page-container.component.scss'\n})\nexport class GamePageContainerComponent implements OnInit {\n  private store = inject(Store);\n\n  playerList$ = this.store.select(selectPlayerList);\n  selectGameDataAddress$ = this.store.select(selectGameDataAddress);\n  selectGameData$ = this.store.select(selectGameData);\n\n  ngOnInit() {\n    const currentTime = new Date().toISOString();\n    this.store.dispatch(setLaunchTime({ launchTime: currentTime }))\n  }\n\n  events(event: any) {\n    if (event.event === 'ButtonComponent:CLICK') {\n      console.log(event)\n      if (event.data === 'Start') {\n        this.store.dispatch(loadGameData({data: event.gameData}));\n      }\n      if (event.data === 'Finish') {\n        this.store.dispatch(getGameData({data: event.gameData}));\n      }\n    } else if (event.event === 'MultiselectComponent:CHANGE') {\n      this.store.dispatch(setSelectedPlayerList({selectedPlayerList: event.data}));\n    }\n  }\n}\n",
            "styleUrl": "./game-page-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<app-game-page\n  [playerList]=\"(playerList$ | async) ?? []\"\n  [gameDataAddress]=\"(selectGameDataAddress$ | async) ?? {}\"\n  [gameData]=\"(selectGameData$ | async) ?? {}\"\n  (emitter)=\"events($event)\"\n></app-game-page>\n"
        },
        {
            "name": "GamesPanelComponent",
            "id": "component-GamesPanelComponent-5cef3d1155de89d2cfa9ffba9de1f14b752370468d1742f0c653e6a0d848567dc3a76d7caa3a4abd61226f5b22d8c7ed623ecaa1ad2b4d4ddc2bd05b464dc48e",
            "file": "src/app/components/games-panel/games-panel.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-games-panel",
            "styleUrls": [
                "./games-panel.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./games-panel.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-games-panel',\n  templateUrl: './games-panel.component.html',\n  styleUrls: ['./games-panel.component.scss'],\n  standalone: true,\n  imports: [CommonModule]\n})\nexport class GamesPanelComponent {\n} ",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".games-panel {\n  align-items: center;\n  border: 0px solid rgb(255, 255, 255);\n  box-sizing: border-box;\n  color: rgb(255, 255, 255);\n  display: flex;\n  font-family: avertastd;\n  font-feature-settings: normal;\n  font-size: 14px;\n  font-variation-settings: normal;\n  height: 32px;\n  line-height: 21px;\n  margin: 24px 0 6px 0;\n  tab-size: 4;\n  text-size-adjust: 100%;\n  unicode-bidi: isolate;\n  width: 710px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n\n  h2 {\n    margin: 0;\n    font-size: 24px;\n    font-weight: 600;\n  }\n} ",
                    "styleUrl": "./games-panel.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"games-panel\">\n  <h2>Наши игры</h2>\n</div> "
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-48b9abe37706bc42f20cfa97ed9f943678344ea7d254c0c82183c657750c2191b43486fe730c778627b2ea6aa0e2f33a7abcf3ce08b68ad18b062ad99ea97acb",
            "file": "src/stories/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-header",
            "styleUrls": [
                "./header.css"
            ],
            "styles": [],
            "template": "<header>  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 66,
                    "type": "User | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onCreateAccount",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 75,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogin",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 69,
                    "type": "EventEmitter"
                },
                {
                    "name": "onLogout",
                    "defaultValue": "new EventEmitter<Event>()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 72,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "ButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input, Output, EventEmitter } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ButtonComponent } from './button.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-header',\n  standalone: true,\n  imports: [CommonModule, ButtonComponent],\n  template: `<header>\n  <div class=\"storybook-header\">\n    <div>\n      <svg width=\"32\" height=\"32\" viewBox=\"0 0 32 32\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M10 0h12a10 10 0 0110 10v12a10 10 0 01-10 10H10A10 10 0 010 22V10A10 10 0 0110 0z\"\n            fill=\"#FFF\"\n          />\n          <path\n            d=\"M5.3 10.6l10.4 6v11.1l-10.4-6v-11zm11.4-6.2l9.7 5.5-9.7 5.6V4.4z\"\n            fill=\"#555AB9\"\n          />\n          <path d=\"M27.2 10.6v11.2l-10.5 6V16.5l10.5-6zM15.7 4.4v11L6 10l9.7-5.5z\" fill=\"#91BAF8\" />\n        </g>\n      </svg>\n      <h1>Acme</h1>\n    </div>\n    <div>\n      <div *ngIf=\"user\">\n        <span class=\"welcome\">\n          Welcome, <b>{{ user.name }}</b\n          >!\n        </span>\n        <storybook-button\n          *ngIf=\"user\"\n          size=\"small\"\n          (onClick)=\"onLogout.emit($event)\"\n          label=\"Log out\"\n        ></storybook-button>\n      </div>\n      <div *ngIf=\"!user\">\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          class=\"margin-left\"\n          (onClick)=\"onLogin.emit($event)\"\n          label=\"Log in\"\n        ></storybook-button>\n        <storybook-button\n          *ngIf=\"!user\"\n          size=\"small\"\n          [primary]=\"true\"\n          class=\"margin-left\"\n          (onClick)=\"onCreateAccount.emit($event)\"\n          label=\"Sign up\"\n        ></storybook-button>\n      </div>\n    </div>\n  </div>\n</header>`,\n  styleUrls: ['./header.css'],\n})\nexport class HeaderComponent {\n  @Input()\n  user: User | null = null;\n\n  @Output()\n  onLogin = new EventEmitter<Event>();\n\n  @Output()\n  onLogout = new EventEmitter<Event>();\n\n  @Output()\n  onCreateAccount = new EventEmitter<Event>();\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-header {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  border-bottom: 1px solid rgba(0, 0, 0, 0.1);\n  padding: 15px 20px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-header svg {\n  display: inline-block;\n  vertical-align: top;\n}\n\n.storybook-header h1 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 6px 0 6px 10px;\n  font-weight: 700;\n  font-size: 20px;\n  line-height: 1;\n}\n\n.storybook-header button + button {\n  margin-left: 10px;\n}\n\n.storybook-header .welcome {\n  margin-right: 10px;\n  color: #333;\n  font-size: 14px;\n}\n",
                    "styleUrl": "./header.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "HeaderComponent",
            "id": "component-HeaderComponent-6900cf93a5c4d0447ee35287560af644966ec18e3f033306883f83ae4ba92eacc46522d3b3a3e5562fd5fad7965cedae4567f5be2a8e7da0c6e05fcd817bbfc5-1",
            "file": "src/app/components/header/header.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "player",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 28,
                    "type": "IPlayer | null",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 29,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "sidebarService",
                    "defaultValue": "inject(SidebarService)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "string",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 40,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "MatToolbarModule",
                    "type": "module"
                },
                {
                    "name": "LoginButtonComponent",
                    "type": "component"
                },
                {
                    "name": "RegisterButtonComponent",
                    "type": "component"
                },
                {
                    "name": "LogoutButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, inject, Input, Output} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatToolbarModule } from '@angular/material/toolbar';\nimport { LoginButtonComponent } from '../login-button/login-button.component';\nimport { RegisterButtonComponent } from '../register-button/register-button.component';\nimport { SidebarService } from '../../services/sidebar.service';\nimport {IPlayer} from '../../+state/auth/auth.reducer';\nimport {LogoutButtonComponent} from '../logout-button/logout-button.component';\n\n@Component({\n  selector: 'app-header',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatIconModule,\n    MatToolbarModule,\n    LoginButtonComponent,\n    RegisterButtonComponent,\n    LogoutButtonComponent\n  ],\n  templateUrl: './header.component.html',\n  styleUrl: './header.component.scss'\n})\nexport class HeaderComponent {\n  @Input() player: IPlayer | null = null;\n  @Output() emitter = new EventEmitter();\n\n  private sidebarService = inject(SidebarService);\n\n  events(event: string) {\n    const message = {\n      event: `HeaderComponent:${event}`,\n    };\n    this.emitter.emit(message);\n  }\n\n  toggleSidebar(): void {\n    this.sidebarService.toggleSidebar();\n  }\n}\n",
            "styleUrl": "./header.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "isDuplicate": true,
            "duplicateId": 1,
            "duplicateName": "HeaderComponent-1",
            "templateData": "<mat-toolbar class=\"header\">\n  <div class=\"header-content\">\n    <button mat-icon-button class=\"sidebar-toggle\" (click)=\"toggleSidebar()\">\n      <mat-icon>menu</mat-icon>\n    </button>\n    <div class=\"spacer\"></div>\n    @if (!player?.isLogin) {\n      <app-login-button (click)=\"events('login')\"></app-login-button>\n      <app-register-button (click)=\"events('registration')\" [label]=\"'Registration'\"></app-register-button>\n    }\n    @if (player?.isLogin) {\n      <app-logout-button (click)=\"events('logout')\" [label]=\"'Logout'\"></app-logout-button>\n    }\n  </div>\n</mat-toolbar>\n"
        },
        {
            "name": "HeaderContainerComponent",
            "id": "component-HeaderContainerComponent-0809877c8a2b3f7a448698d5fb4cd7fbbdd915cb328278a11c3b923c896d507acb6e0cf853cb3df043e06f4d383fd6ea9d6d41719ab6405b1b880d6eee793fa1",
            "file": "src/app/containers/header-container/header-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-header-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./header-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "getUserData$",
                    "defaultValue": "this.store.select(getUserData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "HeaderComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, inject, Output} from '@angular/core';\nimport {HeaderComponent} from '../../components/header/header.component';\nimport {Store} from '@ngrx/store';\nimport {getUserData} from '../../+state/auth/auth.selectors';\nimport {AsyncPipe} from '@angular/common';\n\n@Component({\n  selector: 'app-header-container',\n  imports: [\n    HeaderComponent,\n    AsyncPipe\n  ],\n  standalone: true,\n  templateUrl: './header-container.component.html',\n  styleUrl: './header-container.component.scss'\n})\nexport class HeaderContainerComponent {\n  @Output() emitter = new EventEmitter();\n\n  private store = inject(Store);\n\n  getUserData$ = this.store.select(getUserData);\n\n}\n",
            "styleUrl": "./header-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-header\n  [player]=\"(getUserData$ | async)\"\n  (emitter)=\"emitter.emit($event)\"\n></app-header>\n"
        },
        {
            "name": "InfoListComponent",
            "id": "component-InfoListComponent-d021fa0c8fb91dd95727c2dc1da6d88ae2b4161a09722f36dc040f4e5692da5909a2beeaaf4f1ab3db7b9eebf928e890a6d4c9240a635e941ae992af6edadb97",
            "file": "src/app/components/info-list/info-list.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-info-list",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./info-list.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-info-list',\n  standalone: true,\n  imports: [],\n  templateUrl: './info-list.component.html',\n  styleUrl: './info-list.component.scss'\n})\nexport class InfoListComponent {\n\n}\n",
            "styleUrl": "./info-list.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>info-list works!</p>\n"
        },
        {
            "name": "LoaderComponent",
            "id": "component-LoaderComponent-b3737fccb40d588fe3828825b4b1c30e7e0a42464a7e57ccce1b5a67a0c926b4872dd2f3ac30d53e142f9f6b94412d433e5a34d9560a681b1694cf631d4cd648",
            "file": "src/app/components/loader/loader.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-loader",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./loader.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-loader',\n  standalone: true,\n  imports: [],\n  templateUrl: './loader.component.html',\n  styleUrl: './loader.component.scss'\n})\nexport class LoaderComponent {\n\n}\n",
            "styleUrl": "./loader.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<p>loader works!</p>\n"
        },
        {
            "name": "LoginButtonComponent",
            "id": "component-LoginButtonComponent-55a58800f8bea8376ba55dd6cbc174f29820ea592511417ed7a57ef32581560b34ec340b4f5c64c251043eecdea6b3cad10a3831f63606b21492829d5a5d4bcd",
            "file": "src/app/components/login-button/login-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-button",
            "styleUrls": [
                "./login-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./login-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-login-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './login-button.component.html',\n  styleUrls: ['./login-button.component.scss']\n})\nexport class LoginButtonComponent {\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-button {\n  align-items: center;\n  appearance: button;\n  background-attachment: scroll;\n  background-clip: border-box;\n  background-color: rgba(0, 0, 0, 0);\n  background-image: none;\n  background-origin: padding-box;\n  background-position-x: 0%;\n  background-position-y: 0%;\n  background-repeat: repeat;\n  background-size: auto;\n  border-bottom-color: rgba(228, 234, 240, 0.098);\n  border-bottom-left-radius: 8px;\n  border-bottom-right-radius: 8px;\n  border-bottom-style: solid;\n  border-bottom-width: 2px;\n  border-image-outset: 0;\n  border-image-repeat: stretch;\n  border-image-slice: 100%;\n  border-image-source: none;\n  border-image-width: 1;\n  border-left-color: rgba(228, 234, 240, 0.098);\n  border-left-style: solid;\n  border-left-width: 2px;\n  border-right-color: rgba(228, 234, 240, 0.098);\n  border-right-style: solid;\n  border-right-width: 2px;\n  border-top-color: rgba(228, 234, 240, 0.098);\n  border-top-left-radius: 8px;\n  border-top-right-radius: 8px;\n  border-top-style: solid;\n  border-top-width: 2px;\n  box-sizing: border-box;\n  color: rgb(255, 255, 255);\n  cursor: pointer;\n  display: flex;\n  font-family: avertastd;\n  font-feature-settings: normal;\n  font-kerning: auto;\n  font-optical-sizing: auto;\n  font-size: 16px;\n  font-size-adjust: none;\n  font-stretch: 100%;\n  font-style: normal;\n  font-variant-alternates: normal;\n  font-variant-caps: normal;\n  font-variant-east-asian: normal;\n  font-variant-emoji: normal;\n  font-variant-ligatures: normal;\n  font-variant-numeric: normal;\n  font-variant-position: normal;\n  font-variation-settings: normal;\n  font-weight: 400;\n  height: 40px;\n  justify-content: center;\n  letter-spacing: normal;\n  line-height: 24px;\n  margin-bottom: 0px;\n  margin-left: 12px;\n  margin-right: 0px;\n  margin-top: 0px;\n  padding-block-end: 0px;\n  padding-block-start: 0px;\n  padding-bottom: 0px;\n  padding-inline-end: 16px;\n  padding-inline-start: 16px;\n  padding-left: 16px;\n  padding-right: 16px;\n  padding-top: 0px;\n  tab-size: 4;\n  text-align: center;\n  text-indent: 0px;\n  text-rendering: auto;\n  text-shadow: none;\n  text-size-adjust: 100%;\n  text-transform: none;\n  touch-action: manipulation;\n  user-select: none;\n  width: 78.4844px;\n  word-spacing: 0px;\n  -webkit-tap-highlight-color: rgba(0, 0, 0, 0);\n  -webkit-border-image: none;\n\n  &:hover {\n    background-color: rgba(228, 234, 240, 0.05);\n  }\n\n  &:active {\n    background-color: rgba(228, 234, 240, 0.1);\n  }\n} ",
                    "styleUrl": "./login-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"login-button\">\n  Login\n</button>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-dcfc6f9b7d246810fe0ec0dcee020810a7986671c4f23e34124cfc83177e5285cb0aa0adf4129efdacf8e4616df812cf8ad2f73e95ca16f4d1aed39bcfa37d13",
            "file": "src/app/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "login",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18
                }
            ],
            "methodsClass": [
                {
                    "name": "checkPass",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 20,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "registration",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 31,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "RegisterButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Output} from '@angular/core';\nimport {MatInputModule} from '@angular/material/input';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {FormsModule} from '@angular/forms';\nimport {RegisterButtonComponent} from '../register-button/register-button.component';\n\n@Component({\n  selector: 'app-login-form',\n  imports: [FormsModule, MatFormFieldModule, MatInputModule, RegisterButtonComponent],\n  standalone: true,\n  templateUrl: './login-form.component.html',\n  styleUrl: './login-form.component.scss'\n})\nexport class LoginFormComponent {\n  @Output() emitter = new EventEmitter()\n\n  login: string = '';\n  password: string = '';\n\n  onLogin() {\n    const message = {\n      event: 'LoginFormComponent:login',\n      data: {\n        login: this.login,\n        password: this.password\n      }\n    };\n    this.emitter.emit(message);\n  }\n\n  registration() {\n    const message = {\n      event: 'LoginFormComponent:registration',\n    };\n    this.emitter.emit(message);\n  }\n\n  checkPass() {\n    const message = {\n      event: 'LoginFormComponent:checkPass',\n      data: {\n        login: this.login,\n      }\n    };\n    this.emitter.emit(message);\n  }\n}\n",
            "styleUrl": "./login-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"input-container\">\n  <mat-form-field class=\"custom-input\">\n    <mat-label></mat-label>\n    <input matInput placeholder=\"Login\" [(ngModel)]=\"login\">\n  </mat-form-field>\n</div>\n<div class=\"input-container\">\n  <mat-form-field class=\"custom-input\">\n    <mat-label></mat-label>\n    <input matInput placeholder=\"Password\" type=\"password\" [(ngModel)]=\"password\">\n  </mat-form-field>\n</div>\n<div (click)=\"checkPass()\" class=\"check-pass\"> <span>Forgot your password?</span> </div>\n<app-register-button [label]=\"'Login'\" (click)=\"onLogin()\"></app-register-button>\n<div class=\"new-gamer\">\n  <span>Newbie? </span>\n  <span (click)=\"registration()\" class=\"create\">Create account</span>\n</div>\n"
        },
        {
            "name": "LoginFormContainerComponent",
            "id": "component-LoginFormContainerComponent-64c2a8a37ea09886a8b2b30850d9df79535001378cc8e5335305fdd3bcd1f6504c43bfb99486c581fb95970c610af571df2a4ca8de4b4344bd6f14b2cbbb1d5f",
            "file": "src/app/containers/login-form-container/login-form-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./login-form-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 25,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<LoginFormContainerComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 37,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 28,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openRegistrationModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 41,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "LoginFormComponent",
                    "type": "component"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, inject} from '@angular/core';\nimport {LoginFormComponent} from '../../components/login-form/login-form.component';\nimport {MatIconModule} from '@angular/material/icon';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {RegistrationFormContainerComponent} from '../registration-form-container/registration-form-container.component';\nimport {login} from '../../+state/auth/auth.actions';\nimport {Store} from '@ngrx/store';\n\n@Component({\n  selector: 'app-login-form-container',\n  imports: [\n    LoginFormComponent,\n    MatButtonModule, MatIconModule\n  ],\n  standalone: true,\n  templateUrl: './login-form-container.component.html',\n  styleUrl: './login-form-container.component.scss'\n})\nexport class LoginFormContainerComponent {\n  private store = inject(Store);\n\n  constructor(\n    public dialogRef: MatDialogRef<LoginFormContainerComponent>,\n    public dialog: MatDialog\n  ) {}\n\n  events($event: any) {\n    if ($event.event === 'LoginFormComponent:registration') {\n      this.close();\n      this.openRegistrationModal()\n    } else if ($event.event === 'LoginFormComponent:login') {\n      this.store.dispatch(login({data: $event.data}))\n    }\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  openRegistrationModal(): void {\n    const dialogRef = this.dialog.open(RegistrationFormContainerComponent, {\n      width: '80%',\n      height: '70%',\n      hasBackdrop: true,\n    });\n  }\n}\n",
            "styleUrl": "./login-form-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LoginFormContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 21,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<LoginFormContainerComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\n  <div class=\"left-side\">\n    <img src=\"images/img.png\" alt=\"logo\" class=\"logo-image\">\n  </div>\n\n  <div class=\"form\">\n    <div class=\"tool\">\n\n      <span class=\"login\">\n        Login\n      </span>\n\n      <span class=\"example-spacer\"></span>\n\n      <button class=\"close-button\" type=\"button\" aria-label=\"close\" (click)=\"close()\">\n        <svg class=\"close-icon\" viewBox=\"0 0 32 32\" aria-hidden=\"true\">\n          <path d=\"M6.32 9.23L13.09 16l-6.77 6.77L9.23 25.68 16 18.91l6.77 6.77 2.91-2.91-6.77-6.77 6.77-6.77-2.91-2.91L16 13.09 9.23 6.32 6.32 9.23z\"/>\n        </svg>\n      </button>\n\n    </div>\n\n    <app-login-form (emitter)=\"events($event)\"></app-login-form>\n  </div>\n</div>\n"
        },
        {
            "name": "LogoutButtonComponent",
            "id": "component-LogoutButtonComponent-af89c0312ecdbe9adbcc3b7e85a0477c2eb3058ed723bd4aa84a4b957e93231675865eb67de864b0689a8f9821afee24388f03b3a3690b9087ce01636bc6a288",
            "file": "src/app/components/logout-button/logout-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-logout-button",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./logout-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatIcon"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MatIcon} from '@angular/material/icon';\n\n@Component({\n  selector: 'app-logout-button',\n  imports: [\n    MatIcon\n  ],\n  standalone: true,\n  templateUrl: './logout-button.component.html',\n  styleUrl: './logout-button.component.scss'\n})\nexport class LogoutButtonComponent {\n  @Input() label: string = '';\n\n}\n",
            "styleUrl": "./logout-button.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"register-button\">\n  {{label}}\n  <mat-icon>exit_to_app</mat-icon>\n</button>\n"
        },
        {
            "name": "MainContainerComponent",
            "id": "component-MainContainerComponent-50f6699a2cc310324b3a677fa6b8baf588138b1cea304be9c97604e8444b4d4a7e587cb32f5682b5814be95ecec2b61bf16fa0122b52cdecee95720b1c2e16db",
            "file": "src/app/containers/main-container/main-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 26,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "defaultValue": "inject(MatDialog)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 29,
                    "modifierKind": [
                        123
                    ]
                },
                {
                    "name": "getSidebarValue$",
                    "defaultValue": "this.store.select(getSidebarValue)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "getUserData$",
                    "defaultValue": "this.store.select(getUserData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 31
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 28,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openLoginModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "openRegistrationModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 56,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "SidebarComponent",
                    "type": "component"
                },
                {
                    "name": "HeaderContainerComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                },
                {
                    "name": "RouterOutlet"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, inject, OnInit, Output} from '@angular/core';\nimport {SidebarComponent} from '../../components/sidebar/sidebar.component';\nimport {MatDialog} from '@angular/material/dialog';\nimport {LoginFormContainerComponent} from '../login-form-container/login-form-container.component';\nimport {RegistrationFormContainerComponent} from '../registration-form-container/registration-form-container.component';\nimport {HeaderContainerComponent} from '../header-container/header-container.component';\nimport {Store} from '@ngrx/store';\nimport {getSidebarValue, getUserData} from '../../+state/auth/auth.selectors';\nimport {AsyncPipe} from '@angular/common';\nimport {checkAuth, logout} from '../../+state/auth/auth.actions';\nimport {RouterOutlet} from '@angular/router';\n\n@Component({\n  selector: 'app-main-container',\n  imports: [\n    SidebarComponent,\n    HeaderContainerComponent,\n    AsyncPipe,\n    RouterOutlet\n  ],\n  standalone: true,\n  templateUrl: './main-container.component.html',\n  styleUrl: './main-container.component.scss'\n})\nexport class MainContainerComponent implements OnInit {\n  @Output() emitter = new EventEmitter();\n\n  private store = inject(Store);\n  private dialog = inject(MatDialog);\n\n  getUserData$ = this.store.select(getUserData);\n  getSidebarValue$ = this.store.select(getSidebarValue);\n\n  ngOnInit() {\n    this.store.dispatch(checkAuth())\n  }\n\n  events($event: any) {\n    if ($event.event === 'HeaderComponent:login') {\n      this.openLoginModal()\n    } else if ($event.event === 'HeaderComponent:registration') {\n      this.openRegistrationModal()\n    } else if ($event.event === 'HeaderComponent:logout') {\n      this.store.dispatch(logout())\n    }\n  }\n\n  openLoginModal(): void {\n    const dialogRef = this.dialog.open(LoginFormContainerComponent, {\n      width: '80%',\n      height: '70%',\n      hasBackdrop: true,\n    });\n  }\n\n  openRegistrationModal(): void {\n    const dialogRef = this.dialog.open(RegistrationFormContainerComponent, {\n      width: '80%',\n      height: '70%',\n      hasBackdrop: true,\n    });\n\n  }\n}\n",
            "styleUrl": "./main-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<div class=\"main-container\" [class.sidebar-open]=\"getSidebarValue$ | async\">\n  <app-header-container (emitter)=\"events($event)\"></app-header-container>\n  <div class=\"content\">\n    <app-sidebar [user]=\"getUserData$ | async\"></app-sidebar>\n    <div class=\"main-content\">\n      <router-outlet></router-outlet>\n    </div>\n  </div>\n</div>\n"
        },
        {
            "name": "MainContentComponent",
            "id": "component-MainContentComponent-e672f49bcb508f04a2c764969930ae9291ee5097a9dbb2c41a41ba48d3283a21cb994ac50ea43c29ba6edbe4d2abc590c46e6ff3a265271333d41fc0d4ffed55",
            "file": "src/app/components/main-content/main-content.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-content",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-content.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CardGameComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {CardGameComponent} from '../card-game/card-game.component';\n\n@Component({\n  selector: 'app-main-content',\n  imports: [\n    CardGameComponent,\n  ],\n  standalone: true,\n  templateUrl: './main-content.component.html',\n  styleUrl: './main-content.component.scss'\n})\nexport class MainContentComponent {\n\n}\n",
            "styleUrl": "./main-content.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-card-game></app-card-game>\n"
        },
        {
            "name": "MainContentContainerComponent",
            "id": "component-MainContentContainerComponent-4ebc6a0c137dc4b6eff375eba42e01805294dbb7d1f0811e4a604aeee9e6627e45e039bae57d001128fc2de9512c14032c9cbd66f04b95c6a29dbdf9e2345be7",
            "file": "src/app/containers/main-content-container/main-content-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-main-content-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./main-content-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MainContentComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {MainContentComponent} from '../../components/main-content/main-content.component';\n\n@Component({\n  selector: 'app-main-content-container',\n  imports: [\n    MainContentComponent\n  ],\n  standalone: true,\n  templateUrl: './main-content-container.component.html',\n  styleUrl: './main-content-container.component.scss'\n})\nexport class MainContentContainerComponent {\n}\n",
            "styleUrl": "./main-content-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-main-content></app-main-content>\n"
        },
        {
            "name": "MultiselectComponent",
            "id": "component-MultiselectComponent-1a95c9f843c4d3e36b8559a482ca95c60d3631b1027e1c486ad2d50e7b18bead351c76b915c98b22287bb35285fbc6644503a87d3f51e2fa9b0604994b5a170b",
            "file": "src/app/components/multiselect/multiselect.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-multiselect",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./multiselect.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "selectedToppings",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "toppingList",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 19,
                    "type": "any",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "toppings",
                    "defaultValue": "new FormControl('')",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 24
                }
            ],
            "methodsClass": [
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 26,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "ReactiveFormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, OnInit, Output} from '@angular/core';\nimport {FormControl, FormsModule, ReactiveFormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\n\n@Component({\n  selector: 'app-multiselect',\n  standalone: true,\n  imports: [\n    MatFormFieldModule,\n    MatSelectModule,\n    FormsModule,\n    ReactiveFormsModule\n  ],\n  templateUrl: './multiselect.component.html',\n  styleUrl: './multiselect.component.scss'\n})\nexport class MultiselectComponent implements OnInit {\n  @Input() toppingList: any;\n  @Input() selectedToppings: any;\n\n  @Output() emitter = new EventEmitter();\n\n  toppings = new FormControl('');\n\n  ngOnInit() {\n    this.toppings.setValue(this.selectedToppings);\n    this.toppings.valueChanges.subscribe(selected => {\n      const message = {\n        event: 'MultiselectComponent:CHANGE',\n        data: selected\n      }\n      this.emitter.emit(message);\n    });\n  }\n\n}\n",
            "styleUrl": "./multiselect.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "implements": [
                "OnInit"
            ],
            "templateData": "<mat-form-field>\n  <mat-label>Список доступных игроков</mat-label>\n  <mat-select [formControl]=\"toppings\" multiple>\n    <mat-select-trigger>\n      @if ((toppings.value?.length || 0) > 0) {\n        Выбрано игроков: {{ toppings.value?.length }}\n      }\n    </mat-select-trigger>\n    @for (topping of toppingList; track topping) {\n      <mat-option [value]=\"topping.address\">{{topping.name}}</mat-option>\n    }\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "PageComponent",
            "id": "component-PageComponent-21dd6eb370b4983b5c21c84d40e6f54d266a9d9af9889e6e76b35c43058bd53b3e451bad089d5adf4bea46647ba10265a2fa8cb15630398e75636307d4817fc6",
            "file": "src/stories/page.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "storybook-page",
            "styleUrls": [
                "./page.css"
            ],
            "styles": [],
            "template": "<article>  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>",
            "templateUrl": [],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "User | null",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 69
                }
            ],
            "methodsClass": [
                {
                    "name": "doCreateAccount",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 79,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogin",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 75,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "doLogout",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 71,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "HeaderComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { HeaderComponent } from './header.component';\nimport type { User } from './user';\n\n@Component({\n  selector: 'storybook-page',\n  standalone: true,\n  imports: [CommonModule, HeaderComponent],\n  template: `<article>\n  <storybook-header\n    [user]=\"user\"\n    (onLogout)=\"doLogout()\"\n    (onLogin)=\"doLogin()\"\n    (onCreateAccount)=\"doCreateAccount()\"\n  ></storybook-header>\n  <section class=\"storybook-page\">\n    <h2>Pages in Storybook</h2>\n    <p>\n      We recommend building UIs with a\n      <a href=\"https://componentdriven.org\" target=\"_blank\" rel=\"noopener noreferrer\">\n        <strong>component-driven</strong>\n      </a>\n      process starting with atomic components and ending with pages.\n    </p>\n    <p>\n      Render pages with mock data. This makes it easy to build and review page states without\n      needing to navigate to them in your app. Here are some handy patterns for managing page data\n      in Storybook:\n    </p>\n    <ul>\n      <li>\n        Use a higher-level connected component. Storybook helps you compose such data from the\n        \"args\" of child component stories\n      </li>\n      <li>\n        Assemble data in the page component from your services. You can mock these services out\n        using Storybook.\n      </li>\n    </ul>\n    <p>\n      Get a guided tutorial on component-driven development at\n      <a href=\"https://storybook.js.org/tutorials/\" target=\"_blank\" rel=\"noopener noreferrer\">\n        Storybook tutorials\n      </a>\n      . Read more in the\n      <a href=\"https://storybook.js.org/docs\" target=\"_blank\" rel=\"noopener noreferrer\"> docs </a>\n      .\n    </p>\n    <div class=\"tip-wrapper\">\n      <span class=\"tip\">Tip</span> Adjust the width of the canvas with the\n      <svg width=\"10\" height=\"10\" viewBox=\"0 0 12 12\" xmlns=\"http://www.w3.org/2000/svg\">\n        <g fill=\"none\" fillRule=\"evenodd\">\n          <path\n            d=\"M1.5 5.2h4.8c.3 0 .5.2.5.4v5.1c-.1.2-.3.3-.4.3H1.4a.5.5 0 01-.5-.4V5.7c0-.3.2-.5.5-.5zm0-2.1h6.9c.3 0 .5.2.5.4v7a.5.5 0 01-1 0V4H1.5a.5.5 0 010-1zm0-2.1h9c.3 0 .5.2.5.4v9.1a.5.5 0 01-1 0V2H1.5a.5.5 0 010-1zm4.3 5.2H2V10h3.8V6.2z\"\n            id=\"a\"\n            fill=\"#999\"\n          />\n        </g>\n      </svg>\n      Viewports addon in the toolbar\n    </div>\n  </section>\n</article>`,\n  styleUrls: ['./page.css'],\n})\nexport class PageComponent {\n  user: User | null = null;\n\n  doLogout() {\n    this.user = null;\n  }\n\n  doLogin() {\n    this.user = { name: 'Jane Doe' };\n  }\n\n  doCreateAccount() {\n    this.user = { name: 'Jane Doe' };\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".storybook-page {\n  margin: 0 auto;\n  padding: 48px 20px;\n  max-width: 600px;\n  color: #333;\n  font-size: 14px;\n  line-height: 24px;\n  font-family: 'Nunito Sans', 'Helvetica Neue', Helvetica, Arial, sans-serif;\n}\n\n.storybook-page h2 {\n  display: inline-block;\n  vertical-align: top;\n  margin: 0 0 4px;\n  font-weight: 700;\n  font-size: 32px;\n  line-height: 1;\n}\n\n.storybook-page p {\n  margin: 1em 0;\n}\n\n.storybook-page a {\n  color: inherit;\n}\n\n.storybook-page ul {\n  margin: 1em 0;\n  padding-left: 30px;\n}\n\n.storybook-page li {\n  margin-bottom: 8px;\n}\n\n.storybook-page .tip {\n  display: inline-block;\n  vertical-align: top;\n  margin-right: 10px;\n  border-radius: 1em;\n  background: #e7fdd8;\n  padding: 4px 12px;\n  color: #357a14;\n  font-weight: 700;\n  font-size: 11px;\n  line-height: 12px;\n}\n\n.storybook-page .tip-wrapper {\n  margin-top: 40px;\n  margin-bottom: 40px;\n  font-size: 13px;\n  line-height: 20px;\n}\n\n.storybook-page .tip-wrapper svg {\n  display: inline-block;\n  vertical-align: top;\n  margin-top: 3px;\n  margin-right: 4px;\n  width: 12px;\n  height: 12px;\n}\n\n.storybook-page .tip-wrapper svg path {\n  fill: #1ea7fd;\n}\n",
                    "styleUrl": "./page.css"
                }
            ],
            "stylesData": "",
            "extends": []
        },
        {
            "name": "PlayerProfileComponent",
            "id": "component-PlayerProfileComponent-9a20f4d8c8c499871fa4ec7751c8eed02827d142eb81d13564ad001d99d0e9a3e120e967b44197dda8f525adf0faecb3061f21a7087d67390b72d0167fb1d264",
            "file": "src/app/components/player-profile/player-profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-player-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./player-profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "address",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 21,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "balance",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "number | null",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatDividerModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {CommonModule} from '@angular/common';\nimport {MatCardModule} from '@angular/material/card';\nimport {MatDividerModule} from '@angular/material/divider';\nimport {MatButtonModule} from '@angular/material/button';\n\n@Component({\n  selector: 'app-player-profile',\n  standalone: true,\n  imports: [\n    CommonModule,\n    MatCardModule,\n    MatDividerModule,\n    MatButtonModule,\n  ],\n  templateUrl: './player-profile.component.html',\n  styleUrl: './player-profile.component.scss'\n})\nexport class PlayerProfileComponent {\n  @Input() title = '';\n  @Input() address = '';\n  @Input() balance: number | null = null;\n\n  @Output() emitter = new EventEmitter();\n\n}\n",
            "styleUrl": "./player-profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card class=\"example-card\" appearance=\"outlined\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"example-header-image\"></div>\n    <mat-card-title>{{title}}</mat-card-title>\n  </mat-card-header>\n  <mat-divider></mat-divider>\n  <mat-card-content>\n    <div class=\"player-info\">\n      <div class=\"info-row\">\n        <span class=\"label\">Address:</span>\n        <span class=\"value\">{{ address }}</span>\n      </div>\n      <div class=\"info-row\">\n        <span class=\"label\">Balance:</span>\n        <span class=\"value\">{{ balance }}</span>\n      </div>\n      <mat-divider></mat-divider>\n    </div>\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ProfileComponent",
            "id": "component-ProfileComponent-d0fc3f697227092e813d87809456cd32202e23764147b886bdcfb3e20b2df4b0d41f3c61e44a2df8f11e6f718342d31de7aa7b8eac05b7a501fd029b60a0eb29",
            "file": "src/app/components/profile/profile.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "balance",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "IPlayer | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatCardModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport {MatButtonModule} from '@angular/material/button';\nimport {MatCardModule} from '@angular/material/card';\nimport {IPlayer} from '../../+state/auth/auth.reducer';\n\n@Component({\n  selector: 'app-profile',\n  imports: [MatCardModule, MatButtonModule],\n  standalone: true,\n  templateUrl: './profile.component.html',\n  styleUrl: './profile.component.scss'\n})\nexport class ProfileComponent {\n  @Input() user: IPlayer | null = null;\n  @Input() balance: string = '';\n\n}\n",
            "styleUrl": "./profile.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<mat-card class=\"example-card\" appearance=\"outlined\">\n  <mat-card-header>\n    <div mat-card-avatar class=\"example-header-image\"></div>\n    <mat-card-title>{{ user?.login }}</mat-card-title>\n  </mat-card-header>\n  <mat-card-content>\n    Balance: {{ balance }}\n  </mat-card-content>\n</mat-card>\n"
        },
        {
            "name": "ProfileContainerComponent",
            "id": "component-ProfileContainerComponent-f28bbf0a0fb947732a621b3e1309d39b31dbeb1c28818893c50fd7bbbf8e09abefbf5d8b51f427d886a1af1bc78b50c66f1fd90066efd2e7dca380aa6c374272",
            "file": "src/app/containers/profile-container/profile-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-profile-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./profile-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 20,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "getUserData$",
                    "defaultValue": "this.store.select(getUserData)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "store",
                    "defaultValue": "inject(Store)",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 18,
                    "modifierKind": [
                        123
                    ]
                }
            ],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "ProfileComponent",
                    "type": "component"
                },
                {
                    "name": "AsyncPipe",
                    "type": "pipe"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, inject, Output} from '@angular/core';\nimport {ProfileComponent} from '../../components/profile/profile.component';\nimport {Store} from '@ngrx/store';\nimport {getUserData} from '../../+state/auth/auth.selectors';\nimport {AsyncPipe} from '@angular/common';\n\n@Component({\n  selector: 'app-profile-container',\n  imports: [\n    ProfileComponent,\n    AsyncPipe\n  ],\n  standalone: true,\n  templateUrl: './profile-container.component.html',\n  styleUrl: './profile-container.component.scss'\n})\nexport class ProfileContainerComponent {\n  private store = inject(Store);\n\n  @Output() emitter = new EventEmitter();\n\n  getUserData$ = this.store.select(getUserData);\n}\n",
            "styleUrl": "./profile-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-profile [user]=\"getUserData$ | async\"></app-profile>\n"
        },
        {
            "name": "RegisterButtonComponent",
            "id": "component-RegisterButtonComponent-40870f011046eaa4fc51687bd6cd105c5aefbf93b51cb081fa68316ffe2abe43236eeb20ff3a99be36b8001bff2f087a1c25fe1ec29498723163535799b38b18",
            "file": "src/app/components/register-button/register-button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-register-button",
            "styleUrls": [
                "./register-button.component.scss"
            ],
            "styles": [],
            "templateUrl": [
                "./register-button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\n@Component({\n  selector: 'app-register-button',\n  standalone: true,\n  imports: [CommonModule],\n  templateUrl: './register-button.component.html',\n  styleUrls: ['./register-button.component.scss']\n})\nexport class RegisterButtonComponent {\n  @Input() label: string = '';\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".register-button {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  min-width: 96px;\n  width: 100%;\n  height: 40px;\n  box-sizing: border-box;\n\n  font: 800 16px/24px avertastd;\n  color: #000;\n  text-align: center;\n  user-select: none;\n  cursor: pointer;\n\n  background: linear-gradient(90deg, #24ee89, #9fe871);\n  border-radius: 8px;\n  box-shadow:\n    rgba(35, 238, 136, 0.3) 0 0 12px 0,\n    rgb(29, 202, 106) 0 -2px 0 0 inset;\n\n  transition: all 0.2s ease;\n  -webkit-tap-highlight-color: transparent;\n  padding: 0 16px;\n\n  &:hover {\n    background: linear-gradient(90deg, #1aa964, #8bca5d);\n    box-shadow:\n      rgba(35, 238, 136, 0.4) 0 0 15px 0,\n      rgb(29, 202, 106) 0 -2px 0 0 inset;\n  }\n\n  &:active {\n    transform: translateY(1px);\n    box-shadow:\n      rgba(35, 238, 136, 0.2) 0 0 8px 0,\n      rgb(29, 202, 106) 0 -1px 0 0 inset;\n  }\n}\n",
                    "styleUrl": "./register-button.component.scss"
                }
            ],
            "stylesData": "",
            "extends": [],
            "templateData": "<button class=\"register-button\">\n    {{label}}\n</button>\n"
        },
        {
            "name": "RegistrationFormComponent",
            "id": "component-RegistrationFormComponent-18d048c5e1adbe00aa46965bfc4d47e9dc488ec872d1b05b01860f7ab12bee921d2f789ede5c4a824fa48ab31e32ce2437dc86b434bc122013055f2c86eef794",
            "file": "src/app/components/registration-form/registration-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration-form",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./registration-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [
                {
                    "name": "emitter",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [
                {
                    "name": "login",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "password",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                }
            ],
            "methodsClass": [
                {
                    "name": "loginForm",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 33,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "onRegistration",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 22,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "FormsModule",
                    "type": "module"
                },
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "RegisterButtonComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, EventEmitter, Output} from '@angular/core';\nimport {MatInputModule} from '@angular/material/input';\nimport {RegisterButtonComponent} from '../register-button/register-button.component';\nimport {FormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\n\n@Component({\n  selector: 'app-registration-form',\n  imports: [\n    FormsModule, MatFormFieldModule, MatInputModule, RegisterButtonComponent\n  ],\n  standalone: true,\n  templateUrl: './registration-form.component.html',\n  styleUrl: './registration-form.component.scss'\n})\nexport class RegistrationFormComponent {\n  @Output() emitter = new EventEmitter()\n\n  login: string = '';\n  password: string = '';\n\n  onRegistration() {\n    const message = {\n      event: 'RegistrationFormComponent:addAccount',\n      data: {\n        login: this.login,\n        password: this.password\n      }\n    };\n    this.emitter.emit(message);\n  }\n\n  loginForm() {\n    const message = {\n      event: 'RegistrationFormComponent:login',\n    };\n    this.emitter.emit(message);\n  }\n\n}\n",
            "styleUrl": "./registration-form.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<div class=\"input-container\">\n  <mat-form-field class=\"custom-input\">\n    <mat-label></mat-label>\n    <input matInput placeholder=\"Login\" [(ngModel)]=\"login\">\n  </mat-form-field>\n</div>\n<div class=\"input-container\">\n  <mat-form-field class=\"custom-input\">\n    <mat-label></mat-label>\n    <input matInput placeholder=\"Password\" [(ngModel)]=\"password\">\n  </mat-form-field>\n</div>\n<app-register-button [label]=\"'Registration'\" (click)=\"onRegistration()\"></app-register-button>\n<div class=\"new-gamer\">\n  <span>  Already have an account? </span>\n  <span (click)=\"loginForm()\" class=\"create\">Login</span>\n</div>\n\n"
        },
        {
            "name": "RegistrationFormContainerComponent",
            "id": "component-RegistrationFormContainerComponent-58fe09da34ea7f6c97390142f1b0c27944cd9c46097b56dfb44ffd660f4b775bd2f4df244e1fac472028bfc72742695f1c25ca07cacc5c7945b30991561770b5",
            "file": "src/app/containers/registration-form-container/registration-form-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-registration-form-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./registration-form-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "dialog",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialog",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 20,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "dialogRef",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "MatDialogRef<RegistrationFormComponent>",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                },
                {
                    "name": "store",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Store",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 21,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "close",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 34,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "events",
                    "args": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 24,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "$event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                },
                {
                    "name": "openLoginModal",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 38,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RegistrationFormComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {RegistrationFormComponent} from '../../components/registration-form/registration-form.component';\nimport {LoginFormContainerComponent} from '../login-form-container/login-form-container.component';\nimport {MatDialog, MatDialogRef} from '@angular/material/dialog';\nimport {Store} from '@ngrx/store';\nimport {addAccount} from '../../+state/auth/auth.actions';\n\n@Component({\n  selector: 'app-registration-form-container',\n  imports: [\n    RegistrationFormComponent,\n  ],\n  standalone: true,\n  templateUrl: './registration-form-container.component.html',\n  styleUrl: './registration-form-container.component.scss'\n})\nexport class RegistrationFormContainerComponent {\n  constructor(\n    public dialogRef: MatDialogRef<RegistrationFormComponent>,\n    public dialog: MatDialog,\n    public store: Store\n  ) {}\n\n  events($event: any) {\n    if ($event.event === 'RegistrationFormComponent:login') {\n      this.close();\n      this.openLoginModal()\n    }\n    if ($event.event === 'RegistrationFormComponent:addAccount') {\n      this.store.dispatch(addAccount({data: $event.data}))\n    }\n  }\n\n  close() {\n    this.dialogRef.close();\n  }\n\n  openLoginModal(): void {\n    const dialogRef = this.dialog.open(LoginFormContainerComponent, {\n      width: '80%',\n      height: '70%',\n      hasBackdrop: true,\n    });\n\n    dialogRef.afterClosed().subscribe(result => {\n      console.log('Модальное окно закрыто');\n    });\n  }\n}\n",
            "styleUrl": "./registration-form-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RegistrationFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": ""
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "dialogRef",
                        "type": "MatDialogRef<RegistrationFormComponent>",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "dialog",
                        "type": "MatDialog",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    },
                    {
                        "name": "store",
                        "type": "Store",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<div class=\"container\">\n  <div class=\"left-side\">\n    <img src=\"images/img.png\" alt=\"logo\" class=\"logo-image\">\n  </div>\n\n  <div class=\"form\">\n    <div class=\"tool\">\n\n      <span class=\"login\">\n        Registration\n      </span>\n\n      <span class=\"example-spacer\"></span>\n\n      <button class=\"close-button\" type=\"button\" aria-label=\"close\" (click)=\"close()\">\n        <svg class=\"close-icon\" viewBox=\"0 0 32 32\" aria-hidden=\"true\">\n          <path d=\"M6.32 9.23L13.09 16l-6.77 6.77L9.23 25.68 16 18.91l6.77 6.77 2.91-2.91-6.77-6.77 6.77-6.77-2.91-2.91L16 13.09 9.23 6.32 6.32 9.23z\"/>\n        </svg>\n      </button>\n\n    </div>\n\n    <app-registration-form (emitter)=\"events($event)\"></app-registration-form>\n\n  </div>\n</div>\n"
        },
        {
            "name": "RockPaperScissorsGameComponent",
            "id": "component-RockPaperScissorsGameComponent-c2186a984cde2f2a63a27356086b55a8d110a00aa6d407ed2b6882a04ca3b6125bab697c0b1c7eb8da77952fc5bc61c5da546027ac646bd5aea6d8a2091f7ba7",
            "file": "src/app/components/rock-paper-scissors-game/rock-paper-scissors-game.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rock-paper-scissors-game",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rock-paper-scissors-game.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-rock-paper-scissors-game',\n  imports: [],\n  standalone: true,\n  templateUrl: './rock-paper-scissors-game.component.html',\n  styleUrl: './rock-paper-scissors-game.component.scss'\n})\nexport class RockPaperScissorsGameComponent {\n\n}\n",
            "styleUrl": "./rock-paper-scissors-game.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": ""
        },
        {
            "name": "RockPaperScissorsGameContainerComponent",
            "id": "component-RockPaperScissorsGameContainerComponent-cbb6bb4b99a5ea73266fb34f076c2129a1b9c6bb236e0484553575c55c2e6a3f6138880cb3bf3c692d8c35cf2414e6320e8447fffa2badaefb60b7377ab8d886",
            "file": "src/app/containers/rock-paper-scissors-game-container/rock-paper-scissors-game-container.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-rock-paper-scissors-game-container",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./rock-paper-scissors-game-container.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "RockPaperScissorsGameComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\nimport {\n  RockPaperScissorsGameComponent\n} from '../../components/rock-paper-scissors-game/rock-paper-scissors-game.component';\n\n@Component({\n  selector: 'app-rock-paper-scissors-game-container',\n  imports: [\n    RockPaperScissorsGameComponent\n  ],\n  standalone: true,\n  templateUrl: './rock-paper-scissors-game-container.component.html',\n  styleUrl: './rock-paper-scissors-game-container.component.scss'\n})\nexport class RockPaperScissorsGameContainerComponent {\n\n}\n",
            "styleUrl": "./rock-paper-scissors-game-container.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<app-rock-paper-scissors-game></app-rock-paper-scissors-game>\n"
        },
        {
            "name": "SelectComponent",
            "id": "component-SelectComponent-a65c4c33ef3aa17e26c1386dbf694149c1b20bc944f82e510c4137b7df157830efd5adc86ad2b6ca1c3b1c772e2b6e90faa2a7db953a4611b6f1dcc4141659ac",
            "file": "src/app/components/select/select.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-select",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./select.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "label",
                    "defaultValue": "'Place your bet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 25,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "list",
                    "defaultValue": "[\n    {value: '0.0001', viewValue: '0.0001'},\n    {value: '0.0010', viewValue: '0.0010'},\n    {value: '0.0100', viewValue: '0.0100'},\n    {value: '0.1000', viewValue: '0.1000'},\n    {value: '1.0000', viewValue: '1.0000'},\n  ]",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "any",
                    "decorators": []
                },
                {
                    "name": "title",
                    "defaultValue": "'Bet'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 24,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "MatFormFieldModule",
                    "type": "module"
                },
                {
                    "name": "MatSelectModule",
                    "type": "module"
                },
                {
                    "name": "MatInputModule",
                    "type": "module"
                },
                {
                    "name": "FormsModule",
                    "type": "module"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport {FormsModule} from '@angular/forms';\nimport {MatFormFieldModule} from '@angular/material/form-field';\nimport {MatSelectModule} from '@angular/material/select';\nimport {MatInputModule} from '@angular/material/input';\n\n@Component({\n  selector: 'app-select',\n  standalone: true,\n  imports: [\n    MatFormFieldModule, MatSelectModule, MatInputModule, FormsModule\n  ],\n  templateUrl: './select.component.html',\n  styleUrl: './select.component.scss'\n})\nexport class SelectComponent {\n  @Input() list: any = [\n    {value: '0.0001', viewValue: '0.0001'},\n    {value: '0.0010', viewValue: '0.0010'},\n    {value: '0.0100', viewValue: '0.0100'},\n    {value: '0.1000', viewValue: '0.1000'},\n    {value: '1.0000', viewValue: '1.0000'},\n  ];\n  @Input() title: string = 'Bet';\n  @Input() label: string = 'Place your bet';\n}\n",
            "styleUrl": "./select.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "extends": [],
            "templateData": "<span>{{ title }}</span>\n<mat-form-field>\n  <mat-label>{{ label }}</mat-label>\n  <mat-select>\n    @for (item of list; track item) {\n      <mat-option [value]=\"item.value\">{{item.viewValue}}</mat-option>\n    }\n  </mat-select>\n</mat-form-field>\n"
        },
        {
            "name": "SidebarComponent",
            "id": "component-SidebarComponent-3748eebff4bbd47cb47ec05aa39e14bdf89924d56879d6ac7c8018051ab664bc1d27329eea780db23ec7ca290b965cd49edf6b86ac46943721aa8e880f9d0c41",
            "file": "src/app/components/sidebar/sidebar.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-sidebar",
            "styleUrls": [],
            "styles": [],
            "templateUrl": [
                "./sidebar.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "user",
                    "defaultValue": "null",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 17,
                    "type": "IPlayer | null",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "isExpanded",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 22
                },
                {
                    "name": "sidebarService",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "SidebarService",
                    "indexKey": "",
                    "optional": false,
                    "description": "",
                    "line": 19,
                    "modifierKind": [
                        125
                    ]
                }
            ],
            "methodsClass": [
                {
                    "name": "toggleSidebar",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 23,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": true,
            "imports": [
                {
                    "name": "CommonModule",
                    "type": "module"
                },
                {
                    "name": "MatButtonModule",
                    "type": "module"
                },
                {
                    "name": "MatIconModule",
                    "type": "module"
                },
                {
                    "name": "ProfileContainerComponent",
                    "type": "component"
                }
            ],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import {Component, Input} from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatIconModule } from '@angular/material/icon';\nimport { SidebarService } from '../../services/sidebar.service';\nimport {ProfileContainerComponent} from '../../containers/profile-container/profile-container.component';\nimport {IPlayer} from '../../+state/auth/auth.reducer';\n\n@Component({\n  selector: 'app-sidebar',\n  standalone: true,\n  imports: [CommonModule, MatButtonModule, MatIconModule, ProfileContainerComponent],\n  templateUrl: './sidebar.component.html',\n  styleUrl: './sidebar.component.scss'\n})\nexport class SidebarComponent {\n  @Input() user: IPlayer | null = null\n  constructor(\n    public sidebarService: SidebarService\n  ) {}\n\n  isExpanded = false;\n  toggleSidebar() {\n    this.isExpanded = !this.isExpanded;\n  }\n}\n",
            "styleUrl": "./sidebar.component.scss",
            "assetsDirs": [],
            "styleUrlsData": "",
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "sidebarService",
                        "type": "SidebarService",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 17,
                "jsdoctags": [
                    {
                        "name": "sidebarService",
                        "type": "SidebarService",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "extends": [],
            "templateData": "<aside class=\"sidebar\" [class.expanded]=\"sidebarService.isExpanded$ | async\">\n  <div class=\"sidebar-content\">\n    @if (user?.isLogin) {\n      <div class=\"sidebar-menu\">\n        <app-profile-container></app-profile-container>\n      </div>\n    }\n  </div>\n</aside>\n"
        }
    ],
    "modules": [],
    "miscellaneous": {
        "variables": [
            {
                "name": "addAccount",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] addAccount',\n  props<{ data: IPlayer }>()\n)"
            },
            {
                "name": "appConfig",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/app.config.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "ApplicationConfig",
                "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(),\n    provideRouter(routes),\n    provideStore(),\n    provideHttpClient(\n      withInterceptors([AuthInterceptor])\n    ),\n    provideEffects([\n      GameDataEffects,\n      AuthEffects\n    ]),\n    provideStore({\n      [GAME_DATA_FEATURE_KEY]: gameDataReducer,\n      [AUTH_FEATURE_KEY]: authReducer,\n    }),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() })]\n}"
            },
            {
                "name": "AUTH_FEATURE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'auth'"
            },
            {
                "name": "AuthInterceptor",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/services/auth.interceptor.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "HttpInterceptorFn",
                "defaultValue": "(req, next) => {\n  const token = localStorage.getItem('jwtToken');\n  console.log('taken', token)\n\n  if (token) {\n    req = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n  }\n\n  return next(req);\n}"
            },
            {
                "name": "authReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n)"
            },
            {
                "name": "checkAuth",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] checkAuth')"
            },
            {
                "name": "clearPlayer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction('[Auth] clearPlayer')"
            },
            {
                "name": "GAME_DATA_FEATURE_KEY",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "string",
                "defaultValue": "'game-data'"
            },
            {
                "name": "gameDataReducer",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n)"
            },
            {
                "name": "getActiveGames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] getActiveGames',\n  props<{ game: string }>()\n)"
            },
            {
                "name": "getGameData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] getGameData',\n  props<{ data: string }>()\n)"
            },
            {
                "name": "getGameList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameList\n)"
            },
            {
                "name": "getSidebarValue",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.sidebarValue\n)"
            },
            {
                "name": "getUserData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.player\n)"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "AuthState",
                "defaultValue": "{\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n}"
            },
            {
                "name": "initialState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.reducer.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "GameDataState",
                "defaultValue": "{\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n}"
            },
            {
                "name": "loadGameData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] loadGameData',\n  props<{ data: any }>()\n)"
            },
            {
                "name": "loadGameData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] loadGameData',\n  props<{ data: any }>()\n)"
            },
            {
                "name": "loadGameDataFailure",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] loadGameDataFailure',\n  props<{ error: any }>()\n)"
            },
            {
                "name": "loadGameDataSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] loadGameDataSuccess',\n  props<{ data: any }>()\n)"
            },
            {
                "name": "login",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] login',\n  props<{ data: {login: string, password: string} }>()\n)"
            },
            {
                "name": "loginError",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] loginError',\n  props<{ error: string }>()\n)"
            },
            {
                "name": "loginSuccess",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] loginSuccess',\n  props<{ response: IPlayer }>()\n)"
            },
            {
                "name": "logout",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction( '[Auth] logout')"
            },
            {
                "name": "selectActiveGames",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.activeGameList\n)"
            },
            {
                "name": "selectAuthState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<AuthState>(AUTH_FEATURE_KEY)"
            },
            {
                "name": "selectGameData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameData\n)"
            },
            {
                "name": "selectGameDataAddress",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameDataAddress\n)"
            },
            {
                "name": "selectGameDataState",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createFeatureSelector<GameDataState>(GAME_DATA_FEATURE_KEY)"
            },
            {
                "name": "selectPlayerList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.playerList\n)"
            },
            {
                "name": "selectSelectedPlayerList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.selectedPlayerList\n)"
            },
            {
                "name": "selectSelectedPlayerListData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.selectors.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameData.playerList\n)"
            },
            {
                "name": "setLaunchTime",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] setLaunchTime',\n  props<{ launchTime: string }>()\n)"
            },
            {
                "name": "setSelectedPlayerList",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] setSelectedPlayerList',\n  props<{ selectedPlayerList: string[] }>()\n)"
            },
            {
                "name": "setSelectedPlayerListData",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/game-data.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[GameData] setSelectedPlayerListData',\n  props<{ playerList: IPlayer[] }>()\n)"
            },
            {
                "name": "setSidebar",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/auth/auth.actions.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "",
                "defaultValue": "createAction(\n  '[Auth] setSidebar',\n  props<{ sidebarValue: boolean }>()\n)"
            },
            {
                "name": "walletListStabs",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/+state/game-data/stabs.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "[]",
                "defaultValue": "[\n  {\n    name: 'Player 0',\n    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',\n  },\n  {\n    name: 'Player 1',\n    address: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',\n    privateKey: '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d',\n  },\n  {\n    name: 'Player 2',\n    address: '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',\n    privateKey: '0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a',\n  },\n  {\n    name: 'Player 3',\n    address: '0x90F79bf6EB2c4f870365E785982E1f101E93b906',\n    privateKey: '0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6',\n  },\n  {\n    name: 'Player 4',\n    address: '0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65',\n    privateKey: '0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a',\n  },\n  {\n    name: 'Player 5',\n    address: '0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc',\n    privateKey: '0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba',\n  },\n  {\n    name: 'Player 6',\n    address: '0x976EA74026E726554dB657fA54763abd0C3a0aa9',\n    privateKey: '0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e',\n  },\n  {\n    name: 'Player 7',\n    address: '0x14dC79964da2C08b23698B3D3cc7Ca32193d9955',\n    privateKey: '0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356',\n  },\n  {\n    name: 'Player 8',\n    address: '0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f',\n    privateKey: '0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97',\n  },\n  {\n    name: 'Player 9',\n    address: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n    privateKey: '0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6',\n  }\n]"
            }
        ],
        "functions": [],
        "typealiases": [],
        "enumerations": [],
        "groupedVariables": {
            "src/app/+state/auth/auth.actions.ts": [
                {
                    "name": "addAccount",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] addAccount',\n  props<{ data: IPlayer }>()\n)"
                },
                {
                    "name": "checkAuth",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] checkAuth')"
                },
                {
                    "name": "clearPlayer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction('[Auth] clearPlayer')"
                },
                {
                    "name": "loadGameData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] loadGameData',\n  props<{ data: any }>()\n)"
                },
                {
                    "name": "login",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] login',\n  props<{ data: {login: string, password: string} }>()\n)"
                },
                {
                    "name": "loginError",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] loginError',\n  props<{ error: string }>()\n)"
                },
                {
                    "name": "loginSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] loginSuccess',\n  props<{ response: IPlayer }>()\n)"
                },
                {
                    "name": "logout",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction( '[Auth] logout')"
                },
                {
                    "name": "setSidebar",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[Auth] setSidebar',\n  props<{ sidebarValue: boolean }>()\n)"
                }
            ],
            "src/app/app.config.ts": [
                {
                    "name": "appConfig",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/app.config.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ApplicationConfig",
                    "defaultValue": "{\n  providers: [\n    provideZoneChangeDetection({ eventCoalescing: true }),\n    provideHttpClient(),\n    provideRouter(routes),\n    provideStore(),\n    provideHttpClient(\n      withInterceptors([AuthInterceptor])\n    ),\n    provideEffects([\n      GameDataEffects,\n      AuthEffects\n    ]),\n    provideStore({\n      [GAME_DATA_FEATURE_KEY]: gameDataReducer,\n      [AUTH_FEATURE_KEY]: authReducer,\n    }),\n    provideStoreDevtools({ maxAge: 25, logOnly: !isDevMode() })]\n}"
                }
            ],
            "src/app/+state/auth/auth.reducer.ts": [
                {
                    "name": "AUTH_FEATURE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'auth'"
                },
                {
                    "name": "authReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(AuthActions.login, (state) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: true,\n      isLoaded: false,\n      loadingStart: Date.now(),\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: true,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: response\n    }\n  })),\n  on(AuthActions.loginSuccess, (state, {response}) => ({\n    ...state,\n    player: {\n      ...state.player,\n      id: response.id,\n      login: response.login,\n      password: response.password,\n      wallet: response.wallet,\n      isLogin: true\n    }\n  })),\n  on(AuthActions.loginError, (state, {error}) => ({\n    ...state,\n    authApi: {\n      ...state.authApi,\n      isLoading: false,\n      isLoaded: false,\n      loadingTime: Date.now() - (state.authApi.startTime || 0),\n      response: error\n    }\n  })),\n\n  on(AuthActions.setSidebar, (state, {sidebarValue}) => ({\n    ...state,\n    sidebarValue\n  })),\n\n  on(AuthActions.clearPlayer, (state) => ({\n    ...state,\n    player: initialState.player\n  })),\n\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "AuthState",
                    "defaultValue": "{\n  player: {\n    id: '',\n    login: '',\n    password: '',\n    isLogin: false\n  },\n  authApi: {\n    startTime: null,\n    loadingTime: null,\n    isLoading: false,\n    isLoaded: false,\n    response: null\n  },\n  sidebarValue: false,\n}"
                }
            ],
            "src/app/services/auth.interceptor.ts": [
                {
                    "name": "AuthInterceptor",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/services/auth.interceptor.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "HttpInterceptorFn",
                    "defaultValue": "(req, next) => {\n  const token = localStorage.getItem('jwtToken');\n  console.log('taken', token)\n\n  if (token) {\n    req = req.clone({\n      headers: req.headers.set('Authorization', `Bearer ${token}`)\n    });\n  }\n\n  return next(req);\n}"
                }
            ],
            "src/app/+state/game-data/game-data.reducer.ts": [
                {
                    "name": "GAME_DATA_FEATURE_KEY",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "defaultValue": "'game-data'"
                },
                {
                    "name": "gameDataReducer",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createReducer(\n  initialState,\n  on(GameDataActions.loadGameDataSuccess, (state, {data}) => ({\n    ...state,\n    gameDataAddress: data\n  })),\n  on(GameDataActions.setSelectedPlayerList, (state, {selectedPlayerList}) => ({\n    ...state,\n    selectedPlayerList\n  })),\n  on(GameDataActions.setLaunchTime, (state, { launchTime }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      launchTime\n    }\n  })),\n  on(GameDataActions.setSelectedPlayerListData, (state, { playerList }) => ({\n    ...state,\n    gameData: {\n      ...state.gameData,\n      playerList\n    }\n  })),\n)"
                },
                {
                    "name": "initialState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.reducer.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "GameDataState",
                    "defaultValue": "{\n  selectedPlayerList: [],\n  gameDataAddress: '',\n  playerList: walletListStabs,\n  gameData: {\n    gameId: '',\n    launchTime: '',\n    startTime: '',\n    finishTime: '',\n    conditionToStartDone: false,\n    isFinish: false,\n    gameTookPlace: null,\n    bank: 0,\n    playerList: [],\n  },\n\n  gameList: [\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: 'rock-paper-scissors'\n    },\n    {\n      iconList: [\n        'pan_tool',\n        'content_cut',\n        'description'\n      ],\n      title: 'Rock-Paper-Scissors',\n      linkGame: ''\n    }\n  ],\n  activeGameList: [\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n    {\n      id: '11',\n      needPlayers: 3213,\n      registeredPlayers: 4332,\n      bet: 1123\n    },\n  ]\n}"
                }
            ],
            "src/app/+state/game-data/game-data.actions.ts": [
                {
                    "name": "getActiveGames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] getActiveGames',\n  props<{ game: string }>()\n)"
                },
                {
                    "name": "getGameData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] getGameData',\n  props<{ data: string }>()\n)"
                },
                {
                    "name": "loadGameData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] loadGameData',\n  props<{ data: any }>()\n)"
                },
                {
                    "name": "loadGameDataFailure",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] loadGameDataFailure',\n  props<{ error: any }>()\n)"
                },
                {
                    "name": "loadGameDataSuccess",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] loadGameDataSuccess',\n  props<{ data: any }>()\n)"
                },
                {
                    "name": "setLaunchTime",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] setLaunchTime',\n  props<{ launchTime: string }>()\n)"
                },
                {
                    "name": "setSelectedPlayerList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] setSelectedPlayerList',\n  props<{ selectedPlayerList: string[] }>()\n)"
                },
                {
                    "name": "setSelectedPlayerListData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.actions.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createAction(\n  '[GameData] setSelectedPlayerListData',\n  props<{ playerList: IPlayer[] }>()\n)"
                }
            ],
            "src/app/+state/game-data/game-data.selectors.ts": [
                {
                    "name": "getGameList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameList\n)"
                },
                {
                    "name": "selectActiveGames",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.activeGameList\n)"
                },
                {
                    "name": "selectGameData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameData\n)"
                },
                {
                    "name": "selectGameDataAddress",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameDataAddress\n)"
                },
                {
                    "name": "selectGameDataState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<GameDataState>(GAME_DATA_FEATURE_KEY)"
                },
                {
                    "name": "selectPlayerList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.playerList\n)"
                },
                {
                    "name": "selectSelectedPlayerList",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.selectedPlayerList\n)"
                },
                {
                    "name": "selectSelectedPlayerListData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/game-data.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectGameDataState,\n  (state: GameDataState) => state.gameData.playerList\n)"
                }
            ],
            "src/app/+state/auth/auth.selectors.ts": [
                {
                    "name": "getSidebarValue",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.sidebarValue\n)"
                },
                {
                    "name": "getUserData",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createSelector(\n  selectAuthState,\n  (state) => state.player\n)"
                },
                {
                    "name": "selectAuthState",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/auth/auth.selectors.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "defaultValue": "createFeatureSelector<AuthState>(AUTH_FEATURE_KEY)"
                }
            ],
            "src/app/+state/game-data/stabs.ts": [
                {
                    "name": "walletListStabs",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/+state/game-data/stabs.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "[]",
                    "defaultValue": "[\n  {\n    name: 'Player 0',\n    address: '0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266',\n    privateKey: '0xac0974bec39a17e36ba4a6b4d238ff944bacb478cbed5efcae784d7bf4f2ff80',\n  },\n  {\n    name: 'Player 1',\n    address: '0x70997970C51812dc3A010C7d01b50e0d17dc79C8',\n    privateKey: '0x59c6995e998f97a5a0044966f0945389dc9e86dae88c7a8412f4603b6b78690d',\n  },\n  {\n    name: 'Player 2',\n    address: '0x3C44CdDdB6a900fa2b585dd299e03d12FA4293BC',\n    privateKey: '0x5de4111afa1a4b94908f83103eb1f1706367c2e68ca870fc3fb9a804cdab365a',\n  },\n  {\n    name: 'Player 3',\n    address: '0x90F79bf6EB2c4f870365E785982E1f101E93b906',\n    privateKey: '0x7c852118294e51e653712a81e05800f419141751be58f605c371e15141b007a6',\n  },\n  {\n    name: 'Player 4',\n    address: '0x15d34AAf54267DB7D7c367839AAf71A00a2C6A65',\n    privateKey: '0x47e179ec197488593b187f80a00eb0da91f1b9d0b13f8733639f19c30a34926a',\n  },\n  {\n    name: 'Player 5',\n    address: '0x9965507D1a55bcC2695C58ba16FB37d819B0A4dc',\n    privateKey: '0x8b3a350cf5c34c9194ca85829a2df0ec3153be0318b5e2d3348e872092edffba',\n  },\n  {\n    name: 'Player 6',\n    address: '0x976EA74026E726554dB657fA54763abd0C3a0aa9',\n    privateKey: '0x92db14e403b83dfe3df233f83dfa3a0d7096f21ca9b0d6d6b8d88b2b4ec1564e',\n  },\n  {\n    name: 'Player 7',\n    address: '0x14dC79964da2C08b23698B3D3cc7Ca32193d9955',\n    privateKey: '0x4bbbf85ce3377467afe5d46f804f221813b2bb87f24d81f60f1fcdbf7cbf4356',\n  },\n  {\n    name: 'Player 8',\n    address: '0x23618e81E3f5cdF7f54C3d65f7FBc0aBf5B21E8f',\n    privateKey: '0xdbda1821b80551c9d65939329250298aa3472ba22feea921c0cf5d620ea67b97',\n  },\n  {\n    name: 'Player 9',\n    address: '0xa0Ee7A142d267C1f36714E4a8F75612F20a79720',\n    privateKey: '0x2a871d0798f97d79848a013d4936a73bf4cc922c825d33c1cf7073dff6d409c6',\n  }\n]"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {},
        "groupedTypeAliases": {}
    },
    "routes": [],
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "addAccount",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "checkAuth",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "clearPlayer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadGameData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "login",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginError",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loginSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "logout",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSidebar",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "AuthEffects",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "API",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "AuthState",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IAuthApi",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlayer",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsPartialState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AUTH_FEATURE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "authReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getSidebarValue",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getUserData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/auth/auth.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectAuthState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getActiveGames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGameData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadGameData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadGameDataFailure",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "loadGameDataSuccess",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setLaunchTime",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSelectedPlayerList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.actions.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "setSelectedPlayerListData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.effects.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameDataEffects",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "GameDataState",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IActiveGameList",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGameData",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IGameList",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "IPlayer",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "SettingsPartialState",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "GAME_DATA_FEATURE_KEY",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "gameDataReducer",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.reducer.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "initialState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "getGameList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectActiveGames",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGameData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGameDataAddress",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectGameDataState",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectPlayerList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedPlayerList",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/game-data.selectors.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "selectSelectedPlayerListData",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/+state/game-data/stabs.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "walletListStabs",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/app.config.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "appConfig",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/active-game-list/active-game-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ActiveGameListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/9",
                "status": "low"
            },
            {
                "filePath": "src/app/components/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/card-game/card-game.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardGameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/create-game-form/create-game-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CreateGameFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/game-page/game-page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GamePageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/games-panel/games-panel.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GamesPanelComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/header/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/info-list/info-list.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InfoListComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/loader/loader.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-button/login-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/components/logout-button/logout-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LogoutButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/main-content/main-content.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainContentComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/multiselect/multiselect.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MultiselectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/player-profile/player-profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PlayerProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/components/profile/profile.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/register-button/register-button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegisterButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            },
            {
                "filePath": "src/app/components/registration-form/registration-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/rock-paper-scissors-game/rock-paper-scissors-game.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RockPaperScissorsGameComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/select/select.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SelectComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/components/sidebar/sidebar.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "SidebarComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/card-games-container/card-games-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "CardGamesContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/game-page-container/game-page-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "GamePageContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/7",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/header-container/header-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/login-form-container/login-form-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/main-container/main-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/10",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/main-content-container/main-content-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "MainContentContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/profile-container/profile-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ProfileContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/registration-form-container/registration-form-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RegistrationFormContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/8",
                "status": "low"
            },
            {
                "filePath": "src/app/containers/rock-paper-scissors-game-container/rock-paper-scissors-game-container.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "RockPaperScissorsGameContainerComponent",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/auth.interceptor.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "AuthInterceptor",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/services/game-data.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "GameDataService",
                "coveragePercent": 0,
                "coverageCount": "0/4",
                "status": "low"
            },
            {
                "filePath": "src/app/services/registration.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "RegistrationService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/app/services/sidebar.service.ts",
                "type": "injectable",
                "linktype": "injectable",
                "name": "SidebarService",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 83,
                "coverageCount": "5/6",
                "status": "very-good"
            },
            {
                "filePath": "src/stories/header.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "HeaderComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/page.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "PageComponent",
                "coveragePercent": 0,
                "coverageCount": "0/5",
                "status": "low"
            },
            {
                "filePath": "src/stories/user.ts",
                "type": "interface",
                "linktype": "interface",
                "name": "User",
                "coveragePercent": 0,
                "coverageCount": "0/2",
                "status": "low"
            }
        ]
    }
}