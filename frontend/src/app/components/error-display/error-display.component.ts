import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { ErrorHandlerService } from '../../services/error-handler.service';
import { AppError, ErrorType } from '../../models/error.model';
import { trigger, style, transition, animate } from '@angular/animations';

@Component({
  selector: 'app-error-display',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './error-display.component.html',
  styleUrls: ['./error-display.component.scss'],
  animations: [
    trigger('slideInFromBottom', [
      transition(':enter', [
        style({ transform: 'translateY(100%)', opacity: 0 }),
        animate('300ms ease-out', style({ transform: 'translateY(0)', opacity: 1 }))
      ]),
      transition(':leave', [
        animate('300ms ease-in', style({ transform: 'translateY(100%)', opacity: 0 }))
      ])
    ])
  ]
})
export class ErrorDisplayComponent implements OnInit, OnDestroy {
  visibleErrors: AppError[] = [];
  private destroy$ = new Subject<void>();
  private autoCloseTimers = new Map<string, any>();

  constructor(private errorHandlerService: ErrorHandlerService) {}

  ngOnInit(): void {
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –æ—à–∏–±–æ–∫
    this.errorHandlerService.errors$
      .pipe(takeUntil(this.destroy$))
      .subscribe(errors => {
        this.updateVisibleErrors(errors);
      });
  }

  ngOnDestroy(): void {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    this.autoCloseTimers.forEach(timer => clearTimeout(timer));
    this.autoCloseTimers.clear();

    this.destroy$.next();
    this.destroy$.complete();
  }

  /**
   * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫ –≤–∏–¥–∏–º—ã—Ö –æ—à–∏–±–æ–∫ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ
   */
  private updateVisibleErrors(errors: AppError[]): void {
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –æ—à–∏–±–∫–∏
    const newErrors = errors.filter(error =>
      !this.visibleErrors.some(visibleError => visibleError.id === error.id)
    );

    newErrors.forEach(error => {
      this.visibleErrors.push(error);
      this.setupAutoClose(error.id);
    });

    // –£–¥–∞–ª—è–µ–º –æ—à–∏–±–∫–∏, –∫–æ—Ç–æ—Ä—ã—Ö –±–æ–ª—å—à–µ –Ω–µ—Ç –≤ –æ–±—â–µ–º —Å–ø–∏—Å–∫–µ
    this.visibleErrors = this.visibleErrors.filter(visibleError =>
      errors.some(error => error.id === visibleError.id)
    );
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏–µ –æ—à–∏–±–∫–∏ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥
   */
  private setupAutoClose(errorId: string): void {
    const timer = setTimeout(() => {
      this.removeError(errorId);
    }, 5000);

    this.autoCloseTimers.set(errorId, timer);
  }

  /**
   * –£–¥–∞–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –æ—à–∏–±–∫—É
   */
  removeError(errorId: string): void {
    // –û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –∞–≤—Ç–æ–∑–∞–∫—Ä—ã—Ç–∏—è
    const timer = this.autoCloseTimers.get(errorId);
    if (timer) {
      clearTimeout(timer);
      this.autoCloseTimers.delete(errorId);
    }

    // –£–¥–∞–ª—è–µ–º –∏–∑ –≤–∏–¥–∏–º—ã—Ö –æ—à–∏–±–æ–∫
    this.visibleErrors = this.visibleErrors.filter(error => error.id !== errorId);

    // –£–¥–∞–ª—è–µ–º –∏–∑ —Å–µ—Ä–≤–∏—Å–∞
    this.errorHandlerService.removeError(errorId);
  }

  /**
   * –û—á–∏—â–∞–µ—Ç –≤—Å–µ –æ—à–∏–±–∫–∏
   */
  clearAllErrors(): void {
    // –û—á–∏—â–∞–µ–º –≤—Å–µ —Ç–∞–π–º–µ—Ä—ã
    this.autoCloseTimers.forEach(timer => clearTimeout(timer));
    this.autoCloseTimers.clear();

    // –û—á–∏—â–∞–µ–º –≤–∏–¥–∏–º—ã–µ –æ—à–∏–±–∫–∏
    this.visibleErrors = [];

    // –û—á–∏—â–∞–µ–º –≤ —Å–µ—Ä–≤–∏—Å–µ
    this.errorHandlerService.clearAllErrors();
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç CSS –∫–ª–∞—Å—Å –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  getErrorTypeClass(errorType: ErrorType): string {
    switch (errorType) {
      case ErrorType.HTTP:
        return 'error-http';
      case ErrorType.VALIDATION:
        return 'error-validation';
      case ErrorType.NETWORK:
        return 'error-network';
      case ErrorType.AUTHENTICATION:
        return 'error-auth';
      case ErrorType.AUTHORIZATION:
        return 'error-authorization';
      default:
        return 'error-unknown';
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  getErrorIcon(errorType: ErrorType): string {
    switch (errorType) {
      case ErrorType.HTTP:
        return 'üåê';
      case ErrorType.VALIDATION:
        return '‚ö†Ô∏è';
      case ErrorType.NETWORK:
        return 'üì°';
      case ErrorType.AUTHENTICATION:
        return 'üîê';
      case ErrorType.AUTHORIZATION:
        return 'üö´';
      default:
        return '‚ùå';
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–ª—è —Ç–∏–ø–∞ –æ—à–∏–±–∫–∏
   */
  getErrorTypeTitle(errorType: ErrorType): string {
    switch (errorType) {
      case ErrorType.HTTP:
        return 'HTTP –û—à–∏–±–∫–∞';
      case ErrorType.VALIDATION:
        return '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏';
      case ErrorType.NETWORK:
        return '–°–µ—Ç–µ–≤–∞—è –æ—à–∏–±–∫–∞';
      case ErrorType.AUTHENTICATION:
        return '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏';
      case ErrorType.AUTHORIZATION:
        return '–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞';
      default:
        return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞';
    }
  }

  /**
   * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –æ—à–∏–±–∫–∏
   */
  formatErrorTime(timestamp: Date): string {
    return new Date(timestamp).toLocaleTimeString('ru-RU', {
      hour: '2-digit',
      minute: '2-digit',
      second: '2-digit'
    });
  }

  /**
   * TrackBy —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ –æ—à–∏–±–æ–∫
   */
  trackByErrorId(index: number, error: AppError): string {
    return error.id;
  }
}
