/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  FunctionFragment,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
} from "../common";

export interface GameBaseInterface extends Interface {
  getEvent(
    nameOrSignatureOrTopic: "BettingFinished" | "GameFinalized" | "LogBet"
  ): EventFragment;
}

export namespace BettingFinishedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFinalizedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBetEvent {
  export type InputTuple = [
    wallet: AddressLike,
    name: string,
    bet: BigNumberish
  ];
  export type OutputTuple = [wallet: string, name: string, bet: bigint];
  export interface OutputObject {
    wallet: string;
    name: string;
    bet: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface GameBase extends BaseContract {
  connect(runner?: ContractRunner | null): GameBase;
  waitForDeployment(): Promise<this>;

  interface: GameBaseInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getEvent(
    key: "BettingFinished"
  ): TypedContractEvent<
    BettingFinishedEvent.InputTuple,
    BettingFinishedEvent.OutputTuple,
    BettingFinishedEvent.OutputObject
  >;
  getEvent(
    key: "GameFinalized"
  ): TypedContractEvent<
    GameFinalizedEvent.InputTuple,
    GameFinalizedEvent.OutputTuple,
    GameFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "LogBet"
  ): TypedContractEvent<
    LogBetEvent.InputTuple,
    LogBetEvent.OutputTuple,
    LogBetEvent.OutputObject
  >;

  filters: {
    "BettingFinished()": TypedContractEvent<
      BettingFinishedEvent.InputTuple,
      BettingFinishedEvent.OutputTuple,
      BettingFinishedEvent.OutputObject
    >;
    BettingFinished: TypedContractEvent<
      BettingFinishedEvent.InputTuple,
      BettingFinishedEvent.OutputTuple,
      BettingFinishedEvent.OutputObject
    >;

    "GameFinalized(uint256)": TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;
    GameFinalized: TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;

    "LogBet(address,string,uint256)": TypedContractEvent<
      LogBetEvent.InputTuple,
      LogBetEvent.OutputTuple,
      LogBetEvent.OutputObject
    >;
    LogBet: TypedContractEvent<
      LogBetEvent.InputTuple,
      LogBetEvent.OutputTuple,
      LogBetEvent.OutputObject
    >;
  };
}
