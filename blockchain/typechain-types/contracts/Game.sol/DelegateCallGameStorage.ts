/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../../common";

export declare namespace GameBase {
  export type PlayerStruct = {
    name: string;
    wallet: AddressLike;
    bet: BigNumberish;
    isPaid: boolean;
    isPaidOut: boolean;
    result: BigNumberish;
  };

  export type PlayerStructOutput = [
    name: string,
    wallet: string,
    bet: bigint,
    isPaid: boolean,
    isPaidOut: boolean,
    result: bigint
  ] & {
    name: string;
    wallet: string;
    bet: bigint;
    isPaid: boolean;
    isPaidOut: boolean;
    result: bigint;
  };

  export type PlayerResultStruct = {
    wallet: AddressLike;
    percent: BigNumberish;
  };

  export type PlayerResultStructOutput = [wallet: string, percent: bigint] & {
    wallet: string;
    percent: bigint;
  };
}

export interface DelegateCallGameStorageInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "abortGame"
      | "deposit"
      | "finish"
      | "getAllPlayers"
      | "getContractBalance"
      | "getGameData"
      | "getPlayer"
      | "isFinished"
      | "withdrawRemainingBalance"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "BettingFinished" | "GameFinalized" | "LogBet"
  ): EventFragment;

  encodeFunctionData(functionFragment: "abortGame", values?: undefined): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "finish",
    values: [GameBase.PlayerResultStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "getAllPlayers",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getContractBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getGameData",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPlayer",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "isFinished",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawRemainingBalance",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "abortGame", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "finish", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getAllPlayers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getGameData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPlayer", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isFinished", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "withdrawRemainingBalance",
    data: BytesLike
  ): Result;
}

export namespace BettingFinishedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace GameFinalizedEvent {
  export type InputTuple = [timestamp: BigNumberish];
  export type OutputTuple = [timestamp: bigint];
  export interface OutputObject {
    timestamp: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace LogBetEvent {
  export type InputTuple = [
    wallet: AddressLike,
    name: string,
    bet: BigNumberish
  ];
  export type OutputTuple = [wallet: string, name: string, bet: bigint];
  export interface OutputObject {
    wallet: string;
    name: string;
    bet: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DelegateCallGameStorage extends BaseContract {
  connect(runner?: ContractRunner | null): DelegateCallGameStorage;
  waitForDeployment(): Promise<this>;

  interface: DelegateCallGameStorageInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  abortGame: TypedContractMethod<[], [void], "nonpayable">;

  deposit: TypedContractMethod<[], [void], "nonpayable">;

  finish: TypedContractMethod<
    [_playerResultList: GameBase.PlayerResultStruct[]],
    [void],
    "nonpayable"
  >;

  getAllPlayers: TypedContractMethod<
    [],
    [
      [string[], string[], bigint[], boolean[], boolean[], bigint[]] & {
        names: string[];
        wallets: string[];
        bets: bigint[];
        isPaid: boolean[];
        isPaidOut: boolean[];
        results: bigint[];
      }
    ],
    "view"
  >;

  getContractBalance: TypedContractMethod<[], [bigint], "view">;

  getGameData: TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, boolean] & {
        bettingMaxTime: bigint;
        gameMaxTime: bigint;
        createdAt: bigint;
        startedAt: bigint;
        finishedAt: bigint;
        isBettingComplete: boolean;
        isGameAborted: boolean;
        isGameFinished: boolean;
      }
    ],
    "view"
  >;

  getPlayer: TypedContractMethod<
    [index: BigNumberish],
    [GameBase.PlayerStructOutput],
    "view"
  >;

  isFinished: TypedContractMethod<[], [boolean], "view">;

  withdrawRemainingBalance: TypedContractMethod<[], [void], "nonpayable">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "abortGame"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "deposit"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "finish"
  ): TypedContractMethod<
    [_playerResultList: GameBase.PlayerResultStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAllPlayers"
  ): TypedContractMethod<
    [],
    [
      [string[], string[], bigint[], boolean[], boolean[], bigint[]] & {
        names: string[];
        wallets: string[];
        bets: bigint[];
        isPaid: boolean[];
        isPaidOut: boolean[];
        results: bigint[];
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getContractBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getGameData"
  ): TypedContractMethod<
    [],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean, boolean, boolean] & {
        bettingMaxTime: bigint;
        gameMaxTime: bigint;
        createdAt: bigint;
        startedAt: bigint;
        finishedAt: bigint;
        isBettingComplete: boolean;
        isGameAborted: boolean;
        isGameFinished: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlayer"
  ): TypedContractMethod<
    [index: BigNumberish],
    [GameBase.PlayerStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "isFinished"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "withdrawRemainingBalance"
  ): TypedContractMethod<[], [void], "nonpayable">;

  getEvent(
    key: "BettingFinished"
  ): TypedContractEvent<
    BettingFinishedEvent.InputTuple,
    BettingFinishedEvent.OutputTuple,
    BettingFinishedEvent.OutputObject
  >;
  getEvent(
    key: "GameFinalized"
  ): TypedContractEvent<
    GameFinalizedEvent.InputTuple,
    GameFinalizedEvent.OutputTuple,
    GameFinalizedEvent.OutputObject
  >;
  getEvent(
    key: "LogBet"
  ): TypedContractEvent<
    LogBetEvent.InputTuple,
    LogBetEvent.OutputTuple,
    LogBetEvent.OutputObject
  >;

  filters: {
    "BettingFinished()": TypedContractEvent<
      BettingFinishedEvent.InputTuple,
      BettingFinishedEvent.OutputTuple,
      BettingFinishedEvent.OutputObject
    >;
    BettingFinished: TypedContractEvent<
      BettingFinishedEvent.InputTuple,
      BettingFinishedEvent.OutputTuple,
      BettingFinishedEvent.OutputObject
    >;

    "GameFinalized(uint256)": TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;
    GameFinalized: TypedContractEvent<
      GameFinalizedEvent.InputTuple,
      GameFinalizedEvent.OutputTuple,
      GameFinalizedEvent.OutputObject
    >;

    "LogBet(address,string,uint256)": TypedContractEvent<
      LogBetEvent.InputTuple,
      LogBetEvent.OutputTuple,
      LogBetEvent.OutputObject
    >;
    LogBet: TypedContractEvent<
      LogBetEvent.InputTuple,
      LogBetEvent.OutputTuple,
      LogBetEvent.OutputObject
    >;
  };
}
